<mikera.arrayz.impl.AbstractArray: void <init>()>	4	0
<mikera.matrixx.AMatrix: void <init>()>	4	0
<mikera.matrixx.impl.APrimitiveMatrix: void <init>()>	4	0
<mikera.matrixx.Matrix11: void <init>(double)>	8	0
<mikera.matrixx.Matrix11: mikera.matrixx.Matrix11 inverse()>	16	0
<mikera.matrixx.Matrix11: mikera.matrixx.AMatrix inverse()>	4	0
<mikera.matrixx.Matrix22: double determinant()>	13	0
<mikera.matrixx.Matrix22: void <init>(double,double,double,double)>	20	0
<mikera.matrixx.Matrix22: mikera.matrixx.Matrix22 inverse()>	36	0
<mikera.matrixx.Matrix22: mikera.matrixx.AMatrix inverse()>	4	0
<mikera.matrixx.Matrix33: double determinant()>	55	0
<mikera.matrixx.Matrix33: void <init>(double,double,double,double,double,double,double,double,double)>	40	0
<mikera.matrixx.Matrix33: mikera.matrixx.Matrix33 inverse()>	135	0
<mikera.matrixx.Matrix33: mikera.matrixx.AMatrix inverse()>	4	0
<mikera.matrixx.impl.ZeroMatrix: void multiply(mikera.matrixx.AMatrix)>	3	0
<mikera.vectorz.Vector1: int length()>	3	0
<mikera.vectorz.impl.Vector0: int length()>	3	0
<mikera.vectorz.impl.ASizedVector: int length()>	4	0
<mikera.vectorz.Vector3: int length()>	3	0
<mikera.vectorz.Vector2: int length()>	3	0
<mikera.vectorz.AVector: int[] getShape()>	9	0
<mikera.vectorz.impl.ASizedVector: int[] getShape()>	9	0
<mikera.matrixx.impl.ARectangularMatrix: int[] getShape()>	16	0
<mikera.matrixx.Matrix11: int rowCount()>	3	0
<mikera.matrixx.impl.ARectangularMatrix: int columnCount()>	4	0
<mikera.matrixx.impl.ARectangularMatrix: int rowCount()>	4	0
<mikera.matrixx.Matrix33: int columnCount()>	3	0
<mikera.matrixx.Matrix33: int rowCount()>	3	0
<mikera.matrixx.Matrix22: int columnCount()>	3	0
<mikera.matrixx.Matrix22: int rowCount()>	3	0
<mikera.matrixx.Matrix11: int columnCount()>	3	0
<mikera.matrixx.AMatrix: int[] getShape()>	16	0
<mikera.indexz.Index: int get(int)>	7	0
<mikera.indexz.Index: int length()>	5	0
<mikera.indexz.AIndex: java.lang.String toString()>	44	1
<mikera.indexz.AIndex: void <init>()>	4	0
<mikera.indexz.Index: void <init>(int[])>	8	0
<mikera.indexz.Index: mikera.indexz.Index of(int[])>	8	0
<mikera.vectorz.util.ErrorMessages: java.lang.String shape(mikera.arrayz.INDArray)>	6	1
<mikera.vectorz.util.ErrorMessages: java.lang.String describeArray(mikera.arrayz.INDArray)>	15	1
<mikera.vectorz.util.ErrorMessages: java.lang.String invalidSlice(mikera.arrayz.INDArray,int,int)>	19	1
<mikera.matrixx.impl.ARectangularMatrix: int checkRow(int)>	19	1
<mikera.vectorz.AVector: void <init>()>	4	0
<mikera.vectorz.impl.ASizedVector: void <init>(int)>	8	0
<mikera.vectorz.impl.AArrayVector: void <init>(int,double[])>	10	0
<mikera.vectorz.impl.AStridedVector: void <init>(int,double[])>	8	0
<mikera.vectorz.impl.ADenseArrayVector: void <init>(int,double[])>	8	0
<mikera.vectorz.impl.ArraySubVector: void <init>(double[],int,int)>	12	0
<mikera.vectorz.impl.ArraySubVector: mikera.vectorz.impl.ArraySubVector wrap(double[],int,int)>	10	0
<mikera.matrixx.Matrix: mikera.vectorz.impl.ArraySubVector getRow(int)>	16	1
<mikera.matrixx.Matrix: mikera.vectorz.AVector getRow(int)>	6	1
<mikera.vectorz.AVector: int checkLength(int)>	25	0
<mikera.matrixx.Matrix: void unsafeSet(int,int,double)>	15	0
<mikera.matrixx.Matrix11: void unsafeSet(int,int,double)>	8	0
<mikera.matrixx.impl.ARectangularMatrix: int checkColumn(int)>	19	1
<mikera.matrixx.Matrix: void set(int,int,double)>	19	1
<mikera.vectorz.util.ErrorMessages: java.lang.String pos(int[])>	5	1
<mikera.vectorz.util.ErrorMessages: java.lang.String invalidIndex(mikera.arrayz.INDArray,int[])>	40	4
<mikera.matrixx.Matrix11: void set(int,int,double)>	30	4
<mikera.matrixx.Matrix22: void set(int,int,double)>	80	12
<mikera.matrixx.Matrix33: void set(int,int,double)>	120	16
<mikera.matrixx.impl.ARectangularMatrix: void checkIndex(int,int)>	34	4
<mikera.vectorz.util.ErrorMessages: java.lang.String immutable(java.lang.Object)>	12	0
<mikera.matrixx.impl.ZeroMatrix: void unsafeSet(int,int,double)>	10	0
<mikera.vectorz.Vector: void unsafeSet(int,double)>	9	0
<mikera.vectorz.impl.SingleElementVector: double value()>	4	0
<mikera.vectorz.impl.ASingleElementVector: long nonZeroCount()>	14	0
<mikera.vectorz.util.DoubleArrays: int nonZeroCount(double[])>	20	1
<mikera.vectorz.Vector: long nonZeroCount()>	6	1
<mikera.vectorz.impl.SparseIndexedVector: double[] internalData()>	4	0
<mikera.vectorz.impl.ASparseIndexedVector: long nonZeroCount()>	6	1
<mikera.vectorz.impl.AStridedVector: double[] getArray()>	4	0
<mikera.vectorz.Vector: int getArrayOffset()>	3	0
<mikera.vectorz.impl.ADenseArrayVector: double[] toDoubleArray()>	17	0
<mikera.vectorz.util.DoubleArrays: void add(double[],int,double[],int,int)>	31	1
<mikera.vectorz.impl.ADenseArrayVector: void addToArray(int,double[],int,int)>	16	1
<mikera.vectorz.util.IntArrays: int seekPositionSmall(int[],int,int,int)>	35	1
<mikera.vectorz.util.IntArrays: int seekPositionBig(int[],int,int,int)>	86	2
<mikera.vectorz.util.IntArrays: int seekPosition(int[],int,int,int)>	21	3
<mikera.vectorz.util.IntArrays: int seekPosition(int[],int)>	9	3
<mikera.indexz.Index: int seekPosition(int)>	7	3
<mikera.vectorz.impl.SparseIndexedVector: mikera.indexz.Index internalIndex()>	4	0
<mikera.vectorz.impl.ASparseIndexedVector: void addToArray(int,double[],int,int)>	67	4
<mikera.vectorz.impl.SingleElementVector: void addToArray(int,double[],int,int)>	36	0
<mikera.vectorz.AVector: void addToArray(double[],int)>	11	0
<mikera.vectorz.impl.ASparseIndexedVector: int[] internalIndexArray()>	5	0
<mikera.vectorz.impl.ASparseIndexedVector: void addToArray(double[],int)>	38	1
<mikera.vectorz.impl.ASparseVector: double[] toDoubleArray()>	11	0
<mikera.vectorz.Vector: void <init>(double[])>	8	0
<mikera.vectorz.Vector: mikera.vectorz.Vector create(mikera.vectorz.AVector)>	7	0
<mikera.vectorz.impl.SingleElementVector: double unsafeGet(int)>	14	0
<mikera.vectorz.impl.SingleElementVector: int[] nonZeroIndices()>	16	0
<mikera.vectorz.Vector: double unsafeGet(int)>	7	0
<mikera.vectorz.util.DoubleArrays: int nonZeroCount(double[],int,int)>	24	1
<mikera.vectorz.util.DoubleArrays: int[] nonZeroIndices(double[],int,int)>	33	2
<mikera.vectorz.impl.ADenseArrayVector: int[] nonZeroIndices()>	9	2
<mikera.vectorz.util.IntArrays: int indexPositionSmall(int[],int,int,int)>	35	1
<mikera.vectorz.util.IntArrays: int indexPositionBig(int[],int,int,int)>	91	2
<mikera.vectorz.util.IntArrays: int indexPosition(int[],int,int,int)>	21	3
<mikera.vectorz.util.IntArrays: int indexPosition(int[],int)>	9	3
<mikera.indexz.Index: int indexPosition(int)>	7	3
<mikera.vectorz.impl.SparseIndexedVector: double unsafeGet(int)>	16	3
<mikera.vectorz.util.VectorzException: void <init>(java.lang.String)>	6	0
<mikera.vectorz.impl.ASparseIndexedVector: int[] nonZeroIndices()>	51	2
<mikera.vectorz.impl.SparseIndexedVector: mikera.indexz.Index nonSparseIndex()>	4	0
<mikera.indexz.Index: int unsafeGet(int)>	7	0
<mikera.vectorz.impl.SingleElementVector: mikera.indexz.Index nonSparseIndex()>	10	0
<mikera.indexz.Index: boolean isDistinctSorted()>	26	1
<mikera.vectorz.impl.ASparseVector: void <init>(int)>	6	0
<mikera.vectorz.impl.ASparseIndexedVector: void <init>(int)>	6	0
<mikera.vectorz.impl.SparseIndexedVector: void <init>(int,mikera.indexz.Index,double[])>	14	0
<mikera.vectorz.impl.SparseIndexedVector: mikera.vectorz.impl.SparseIndexedVector wrap(int,mikera.indexz.Index,double[])>	30	1
<mikera.vectorz.impl.SparseIndexedVector: mikera.vectorz.impl.SparseIndexedVector create(mikera.vectorz.impl.ASparseVector)>	40	2
<mikera.indexz.Index: mikera.indexz.Index wrap(int[])>	6	0
<mikera.vectorz.impl.SparseIndexedVector: mikera.vectorz.impl.SparseIndexedVector create(mikera.vectorz.AVector)>	48	4
<mikera.vectorz.Vectorz: mikera.vectorz.AVector createSparseMutable(mikera.vectorz.AVector)>	24	4
<mikera.vectorz.AVector: mikera.vectorz.AVector sparseClone()>	4	4
<mikera.vectorz.Vector: void set(int,double)>	9	0
<mikera.vectorz.impl.SparseIndexedVector: boolean isMutable()>	8	0
<mikera.vectorz.impl.ASingleElementVector: boolean isMutable()>	3	0
<mikera.vectorz.AVector: boolean isMutable()>	3	0
<mikera.vectorz.AVector: boolean isFullyMutable()>	4	0
<mikera.vectorz.util.IntArrays: int[] copyOf(int[])>	6	0
<mikera.indexz.Index: mikera.indexz.Index clone()>	8	0
<mikera.vectorz.impl.SparseIndexedVector: mikera.vectorz.impl.SparseIndexedVector exactClone()>	14	0
<mikera.vectorz.impl.SparseIndexedVector: mikera.vectorz.impl.SparseIndexedVector sparseClone()>	4	0
<mikera.vectorz.impl.SparseIndexedVector: mikera.vectorz.AVector sparseClone()>	4	0
<mikera.vectorz.util.ErrorMessages: java.lang.String invalidIndex(mikera.arrayz.INDArray,long)>	15	1
<mikera.vectorz.impl.ASizedVector: int checkIndex(int)>	20	1
<mikera.vectorz.util.IntArrays: int[] insert(int[],int,int)>	33	0
<mikera.indexz.Index: mikera.indexz.Index insert(int,int)>	12	0
<mikera.vectorz.util.DoubleArrays: double[] insert(double[],int,double)>	33	0
<mikera.vectorz.impl.SparseIndexedVector: void unsafeSet(int,double)>	41	6
<mikera.vectorz.impl.SparseIndexedVector: void set(int,double)>	12	7
<mikera.vectorz.impl.SparseIndexedVector: boolean isFullyMutable()>	3	0
<mikera.vectorz.util.DoubleArrays: double[] copyOf(double[])>	5	0
<mikera.vectorz.impl.SparseIndexedVector: mikera.vectorz.impl.SparseIndexedVector create(int,mikera.indexz.Index,double[])>	30	1
<mikera.vectorz.impl.SingleElementVector: mikera.vectorz.impl.SparseIndexedVector sparseClone()>	20	1
<mikera.vectorz.impl.SingleElementVector: mikera.vectorz.AVector sparseClone()>	4	1
<mikera.vectorz.impl.SingleElementVector: void set(int,double)>	9	0
<mikera.vectorz.impl.SingleElementVector: boolean isFullyMutable()>	3	0
<mikera.matrixx.impl.ASparseRCMatrix: void unsafeSetVec(int,mikera.vectorz.AVector)>	9	0
<mikera.matrixx.impl.ASparseRCMatrix: mikera.vectorz.AVector unsafeGetVector(int)>	7	0
<mikera.vectorz.impl.Vector0: void set(int,double)>	8	0
<mikera.vectorz.impl.ZeroVector: void set(int,double)>	9	0
<mikera.vectorz.impl.ArraySubVector: void set(int,double)>	16	1
<mikera.vectorz.impl.ASingleElementVector: void <init>(int,int)>	10	0
<mikera.vectorz.impl.SingleElementVector: void <init>(int,int,double)>	35	0
<mikera.vectorz.impl.SingleElementVector: mikera.vectorz.impl.SingleElementVector create(double,int,int)>	10	0
<mikera.matrixx.impl.SparseRowMatrix: void set(int,int,double)>	14	4
<mikera.matrixx.impl.MatrixRowView: void set(int,double)>	11	0
<mikera.vectorz.AVector: void unsafeSet(int,double)>	8	0
<mikera.matrixx.impl.SparseRowMatrix: void unsafeSet(int,int,double)>	42	4
<mikera.matrixx.impl.ARectangularMatrix: void set(int,int,double)>	14	4
<mikera.matrixx.AMatrix: void unsafeSet(int,int,double)>	10	4
<mikera.matrixx.impl.MatrixRowView: void unsafeSet(int,double)>	11	4
<mikera.matrixx.Matrix: double unsafeGet(int,int)>	13	0
<mikera.matrixx.Matrix11: double unsafeGet(int,int)>	6	0
<mikera.matrixx.Matrix: double get(int,int)>	17	1
<mikera.matrixx.Matrix11: double get(int,int)>	28	4
<mikera.matrixx.Matrix22: double get(int,int)>	75	12
<mikera.matrixx.Matrix33: double get(int,int)>	110	16
<mikera.matrixx.impl.ZeroMatrix: double get(int,int)>	9	4
<mikera.matrixx.impl.SparseRowMatrix: mikera.vectorz.AVector getRow(int)>	13	0
<mikera.vectorz.Vector: double get(int)>	7	0
<mikera.vectorz.impl.SparseIndexedVector: double get(int)>	20	4
<mikera.vectorz.impl.Vector0: double get(int)>	7	0
<mikera.vectorz.impl.ZeroVector: double get(int)>	8	1
<mikera.vectorz.impl.SingleElementVector: double get(int)>	24	0
<mikera.matrixx.impl.SparseRowMatrix: double get(int,int)>	9	0
<mikera.matrixx.AMatrix: double unsafeGet(int,int)>	8	0
<mikera.matrixx.impl.ZeroMatrix: double unsafeGet(int,int)>	5	0
<mikera.vectorz.Vector1: double get(int)>	15	1
<mikera.vectorz.impl.ArraySubVector: double get(int)>	14	1
<mikera.matrixx.impl.MatrixRowView: double get(int)>	9	0
<mikera.vectorz.Vector3: double get(int)>	21	1
<mikera.vectorz.Vector2: double get(int)>	18	1
<mikera.vectorz.AVector: double unsafeGet(int)>	6	0
<mikera.vectorz.impl.ZeroVector: double unsafeGet(int)>	4	0
<mikera.matrixx.impl.SparseRowMatrix: double unsafeGet(int,int)>	9	0
<mikera.matrixx.impl.MatrixRowView: double unsafeGet(int)>	9	0
<mikera.vectorz.impl.ArraySubVector: double unsafeGet(int)>	10	0
<mikera.vectorz.impl.ASizedVector: int checkLength(int)>	24	0
<mikera.vectorz.Vector3: double unsafeGet(int)>	13	0
<mikera.vectorz.Vector2: double unsafeGet(int)>	13	0
<mikera.vectorz.Vector1: double unsafeGet(int)>	5	0
<mikera.matrixx.impl.MatrixRowView: void multiply(mikera.vectorz.AVector)>	26	5
<mikera.vectorz.impl.ZeroVector: void multiply(mikera.vectorz.AVector)>	8	0
<mikera.vectorz.AVector: void multiplyTo(double[],int)>	30	1
<mikera.vectorz.util.ErrorMessages: java.lang.String incompatibleShapes(mikera.arrayz.INDArray,mikera.arrayz.INDArray)>	16	2
<mikera.vectorz.impl.ASizedVector: int checkSameLength(mikera.vectorz.AVector)>	18	2
<mikera.vectorz.impl.ASizedVector: int checkSameLength(mikera.vectorz.impl.ASizedVector)>	18	2
<mikera.vectorz.util.DoubleArrays: void multiply(double[],double[])>	21	1
<mikera.vectorz.Vector: void multiply(mikera.vectorz.Vector)>	12	3
<mikera.vectorz.impl.ArraySubVector: int getArrayOffset()>	4	0
<mikera.vectorz.util.DoubleArrays: void arraymultiply(double[],int,double[],int,int)>	31	1
<mikera.vectorz.impl.ADenseArrayVector: void multiplyTo(double[],int)>	13	1
<mikera.vectorz.Vector: void multiply(mikera.vectorz.AVector)>	20	6
<mikera.vectorz.AVector: int checkSameLength(mikera.vectorz.AVector)>	18	2
<mikera.vectorz.impl.ZeroVector: void unsafeSet(int,double)>	9	0
<mikera.vectorz.impl.ArraySubVector: void unsafeSet(int,double)>	12	0
<mikera.vectorz.AVector: int checkSameLength(mikera.vectorz.impl.ASizedVector)>	18	2
<mikera.vectorz.AVector: void multiply(double[],int)>	26	1
<mikera.vectorz.impl.SparseIndexedVector: void multiply(double[],int)>	33	1
<mikera.vectorz.impl.ADenseArrayVector: void multiply(double[],int)>	38	1
<mikera.vectorz.AVector: void multiply(mikera.vectorz.impl.ADenseArrayVector)>	13	3
<mikera.vectorz.AVector: void multiply(mikera.vectorz.AVector)>	32	6
<mikera.vectorz.impl.ZeroVector: mikera.indexz.Index nonSparseIndex()>	3	0
<mikera.vectorz.util.IntArrays: int countMatches(int[],int[])>	40	1
<mikera.vectorz.util.IntArrays: int[] intersectSorted(int[],int[])>	69	3
<mikera.vectorz.impl.SparseIndexedVector: void multiply(mikera.vectorz.impl.ASparseVector)>	75	11
<mikera.vectorz.impl.SparseIndexedVector: void multiply(mikera.vectorz.AVector)>	50	17
<mikera.vectorz.impl.ADenseArrayVector: void multiply(mikera.vectorz.AVector)>	13	3
<mikera.vectorz.impl.AMatrixViewVector: void <init>(mikera.matrixx.AMatrix,int)>	10	0
<mikera.matrixx.AMatrix: int checkRow(int)>	20	1
<mikera.matrixx.impl.MatrixRowView: void <init>(mikera.matrixx.AMatrix,int)>	16	1
<mikera.matrixx.AMatrix: mikera.vectorz.AVector getRowView(int)>	8	1
<mikera.vectorz.util.ErrorMessages: java.lang.String mismatch(mikera.arrayz.INDArray,mikera.arrayz.INDArray)>	16	2
<mikera.matrixx.AMatrix: void checkSameShape(mikera.matrixx.AMatrix)>	20	2
<mikera.vectorz.impl.ZeroVector: void <init>(int)>	6	0
<mikera.vectorz.impl.ZeroVector: mikera.vectorz.impl.ZeroVector tryCreate(int)>	16	0
<mikera.vectorz.impl.ZeroVector: mikera.vectorz.impl.ZeroVector createCached(int)>	30	0
<mikera.vectorz.impl.ZeroVector: mikera.vectorz.impl.ZeroVector create(int)>	4	0
<mikera.vectorz.Vectorz: mikera.vectorz.AVector createZeroVector(long)>	26	0
<mikera.matrixx.impl.ZeroMatrix: mikera.vectorz.AVector getRowView(int)>	11	1
<mikera.vectorz.Vector: mikera.vectorz.Vector wrap(double[])>	6	0
<mikera.vectorz.Vector: mikera.vectorz.Vector clone()>	6	0
<mikera.vectorz.Vector: mikera.vectorz.AVector clone()>	4	0
<mikera.vectorz.impl.SparseIndexedVector: mikera.vectorz.impl.SparseIndexedVector clone()>	4	0
<mikera.vectorz.impl.SparseIndexedVector: mikera.vectorz.AVector clone()>	4	0
<mikera.vectorz.impl.SparseIndexedVector: int nonSparseElementCount()>	5	0
<mikera.vectorz.AVector: mikera.vectorz.AVector clone()>	4	0
<mikera.vectorz.impl.ASizedVector: long elementCount()>	5	0
<mikera.vectorz.impl.SingleElementVector: int nonSparseElementCount()>	3	0
<mikera.vectorz.impl.ASparseVector: mikera.vectorz.AVector clone()>	21	2
<mikera.vectorz.AVector: mikera.vectorz.AVector mutable()>	9	0
<mikera.vectorz.impl.SparseIndexedVector: mikera.vectorz.impl.SparseIndexedVector createLength(int)>	8	0
<mikera.matrixx.impl.SparseRowMatrix: mikera.vectorz.AVector ensureMutableRow(int)>	32	0
<mikera.matrixx.impl.SparseRowMatrix: mikera.vectorz.AVector getRowView(int)>	6	0
<mikera.matrixx.Matrix: mikera.vectorz.impl.ArraySubVector getRowView(int)>	6	1
<mikera.matrixx.Matrix: mikera.vectorz.AVector getRowView(int)>	6	1
<mikera.matrixx.impl.ARectangularMatrix: void checkSameShape(mikera.matrixx.AMatrix)>	20	2
<mikera.vectorz.impl.APrimitiveVector: void <init>()>	4	0
<mikera.vectorz.Vector3: void <init>(double,double,double)>	16	0
<mikera.vectorz.Vector3: mikera.vectorz.Vector3 of(double,double,double)>	10	0
<mikera.matrixx.Matrix33: mikera.vectorz.Vector3 getRowClone(int)>	39	0
<mikera.matrixx.Matrix33: mikera.vectorz.AVector getRowClone(int)>	6	0
<mikera.vectorz.Vector1: void <init>(double)>	8	0
<mikera.vectorz.Vector1: mikera.vectorz.Vector1 of(double)>	6	0
<mikera.vectorz.util.ErrorMessages: java.lang.String invalidSlice(mikera.arrayz.INDArray,long)>	14	1
<mikera.matrixx.Matrix11: mikera.vectorz.Vector1 getRowClone(int)>	16	1
<mikera.matrixx.Matrix11: mikera.vectorz.AVector getRowClone(int)>	6	1
<mikera.vectorz.Vector2: void <init>(double,double)>	12	0
<mikera.vectorz.Vector2: mikera.vectorz.Vector2 of(double,double)>	8	0
<mikera.matrixx.Matrix22: mikera.vectorz.Vector2 getRowClone(int)>	27	0
<mikera.matrixx.Matrix22: mikera.vectorz.AVector getRowClone(int)>	6	0
<mikera.matrixx.impl.APrimitiveMatrix: mikera.vectorz.AVector getRow(int)>	6	0
<mikera.matrixx.AMatrix: mikera.vectorz.AVector getRow(int)>	6	1
<mikera.matrixx.AMatrix: void multiply(mikera.matrixx.AMatrix)>	23	11
<mikera.matrixx.Matrix11: int checkSquare()>	3	0
<mikera.matrixx.Matrix22: int checkSquare()>	3	0
<mikera.matrixx.Matrix33: int checkSquare()>	3	0
<mikera.vectorz.util.ErrorMessages: java.lang.String nonSquareMatrix(mikera.matrixx.AMatrix)>	10	1
<mikera.matrixx.impl.ARectangularMatrix: int checkSquare()>	16	1
<mikera.matrixx.Matrix11: void <init>(mikera.matrixx.AMatrix)>	11	0
<mikera.matrixx.Matrix22: void unsafeSet(mikera.matrixx.AMatrix)>	27	0
<mikera.matrixx.Matrix22: void set(mikera.matrixx.Matrix22)>	19	0
<mikera.matrixx.Matrix22: void <init>(mikera.matrixx.AMatrix)>	16	0
<mikera.matrixx.Matrix33: void <init>(mikera.matrixx.AMatrix)>	59	0
<mikera.vectorz.util.ErrorMessages: java.lang.String incompatibleShape(mikera.arrayz.INDArray)>	10	1
<mikera.matrixx.algo.Inverse: mikera.matrixx.AMatrix calculateSmall(mikera.matrixx.AMatrix,int)>	35	1
<mikera.matrixx.solve.impl.lu.LUSolver: void <init>()>	10	0
<mikera.matrixx.impl.APrimitiveMatrix: boolean isSquare()>	3	0
<mikera.matrixx.impl.ARectangularMatrix: boolean isSquare()>	10	0
<mikera.matrixx.decompose.impl.lu.AltLU: double[] _getVV()>	4	0
<mikera.matrixx.decompose.impl.lu.AltLU: mikera.matrixx.AMatrix getLU()>	4	0
<mikera.matrixx.decompose.impl.lu.AltLU: boolean isSingular()>	26	1
<mikera.matrixx.solve.impl.TriangularSolver: void solveU(double[],double[],int)>	56	2
<mikera.matrixx.decompose.impl.lu.AltLU: void _solveVectorInternal(double[])>	79	4
<mikera.matrixx.impl.ARectangularMatrix: void <init>(int,int)>	12	0
<mikera.matrixx.impl.AArrayMatrix: void <init>(double[],int,int)>	12	0
<mikera.matrixx.impl.AStridedMatrix: void <init>(double[],int,int)>	10	0
<mikera.matrixx.impl.ADenseArrayMatrix: void <init>(double[],int,int)>	10	0
<mikera.matrixx.Matrix: void <init>(int,int,double[])>	10	0
<mikera.vectorz.util.ErrorMessages: java.lang.String shape(int[])>	5	1
<mikera.vectorz.util.ErrorMessages: java.lang.String tooManyElements(int[])>	10	1
<mikera.vectorz.util.DoubleArrays: double[] createStorage(int,int)>	36	1
<mikera.matrixx.Matrix: void <init>(int,int)>	11	1
<mikera.matrixx.Matrix: mikera.matrixx.Matrix create(int,int)>	8	1
<mikera.matrixx.solve.impl.lu.LUSolver: mikera.matrixx.AMatrix invert()>	91	9
<mikera.indexz.Index: void <init>(int)>	7	0
<mikera.indexz.Index: void set(int,int)>	9	0
<mikera.indexz.Index: mikera.indexz.Index invert()>	24	1
<mikera.indexz.Index: boolean isShortPermutation()>	43	1
<mikera.indexz.Index: boolean isLongPermutation()>	49	2
<mikera.indexz.Index: boolean isPermutation()>	11	3
<mikera.matrixx.impl.ABooleanMatrix: void <init>(int,int)>	8	0
<mikera.matrixx.impl.PermutationMatrix: void <init>(mikera.indexz.Index)>	26	3
<mikera.matrixx.impl.PermutationMatrix: mikera.matrixx.impl.PermutationMatrix getTranspose()>	8	4
<mikera.matrixx.impl.PermutationMatrix: mikera.matrixx.impl.PermutationMatrix create(mikera.indexz.Index)>	7	3
<mikera.matrixx.decompose.impl.lu.AltLU: mikera.matrixx.impl.PermutationMatrix getPivotMatrix()>	11	7
<mikera.matrixx.decompose.impl.lu.AltLU: mikera.matrixx.AMatrix computeU()>	42	5
<mikera.matrixx.decompose.impl.lu.AltLU: mikera.matrixx.AMatrix computeL()>	73	10
<mikera.matrixx.Matrix11: double[] toDoubleArray()>	9	0
<mikera.matrixx.Matrix22: double[] toDoubleArray()>	26	0
<mikera.matrixx.Matrix33: double[] toDoubleArray()>	51	0
<mikera.matrixx.impl.ZeroMatrix: double[] toDoubleArray()>	8	0
<mikera.matrixx.impl.SparseRowMatrix: double[] toDoubleArray()>	31	1
<mikera.matrixx.Matrix: double[] toDoubleArray()>	5	0
<mikera.matrixx.Matrix: void <init>(mikera.matrixx.AMatrix)>	11	0
<mikera.matrixx.Matrix: mikera.matrixx.Matrix create(mikera.matrixx.AMatrix)>	6	0
<mikera.matrixx.decompose.impl.lu.AltLU: void decomposeCommonInit(mikera.matrixx.AMatrix)>	55	1
<mikera.matrixx.decompose.impl.lu.LUPResult: void <init>(mikera.matrixx.AMatrix,mikera.matrixx.AMatrix,mikera.matrixx.impl.PermutationMatrix)>	16	0
<mikera.matrixx.decompose.impl.lu.AltLU: mikera.matrixx.decompose.impl.lu.LUPResult _decompose(mikera.matrixx.AMatrix)>	249	30
<mikera.matrixx.decompose.impl.lu.AltLU: void <init>()>	7	0
<mikera.matrixx.solve.impl.lu.LUSolver: mikera.matrixx.decompose.impl.lu.LUPResult setA(mikera.matrixx.AMatrix)>	35	30
<mikera.matrixx.algo.Inverse: mikera.matrixx.AMatrix createLUPInverse(mikera.matrixx.AMatrix)>	10	39
<mikera.matrixx.algo.Inverse: mikera.matrixx.AMatrix calculate(mikera.matrixx.AMatrix)>	14	41
<mikera.matrixx.AMatrix: mikera.matrixx.AMatrix inverse()>	4	41
<mikera.matrixx.Matrix11: void <init>()>	5	0
<mikera.matrixx.Matrix22: void <init>()>	4	0
<mikera.matrixx.Matrix33: void <init>()>	4	0
<mikera.matrixx.impl.ZeroMatrix: void <init>(int,int)>	8	0
<mikera.matrixx.impl.ZeroMatrix: mikera.matrixx.impl.ZeroMatrix create(int,int)>	8	0
<mikera.matrixx.impl.ASparseRCMatrix: void <init>(int,int,mikera.vectorz.AVector[])>	12	0
<mikera.vectorz.util.ErrorMessages: java.lang.String incompatibleShapes(int,int)>	14	0
<mikera.matrixx.impl.SparseRowMatrix: void <init>(mikera.vectorz.AVector[],int,int)>	27	0
<mikera.matrixx.impl.SparseRowMatrix: void <init>(int,int)>	10	0
<mikera.matrixx.impl.SparseRowMatrix: mikera.matrixx.impl.SparseRowMatrix create(int,int)>	8	0
<mikera.matrixx.Matrixx: mikera.matrixx.impl.SparseRowMatrix createSparse(int,int)>	6	0
<mikera.matrixx.Matrixx: mikera.matrixx.AMatrix newMatrix(int,int)>	50	1
<mikera.matrixx.Matrixx: void fillRandomValues(mikera.matrixx.AMatrix)>	28	6
<mikera.matrixx.Matrixx: mikera.matrixx.AMatrix createRandomMatrix(int,int)>	8	7
<Test.MultiplyRandom: void main(java.lang.String[])>	14	66
