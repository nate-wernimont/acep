Start -> i0 := @parameter0: int -> i1 := @parameter1: int -> i2 := @parameter2: int -> r0 = "" -> r1 = "Java Grande Forum Thread Benchmark Suite - Version 1.0 - Section " -> $r5 = new java.lang.StringBuilder -> $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) -> specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6) -> $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("2 - Size A") -> r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() -> goto [?= $r20 = <java.lang.System: java.io.PrintStream out>] -> $r20 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>(r0) -> if i2 != 1 goto $r26 = <java.lang.System: java.io.PrintStream out> -> $r21 = <java.lang.System: java.io.PrintStream out> -> $r22 = new java.lang.StringBuilder -> specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executing on ") -> $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2) -> $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" thread") -> $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() -> virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r25) -> goto [?= $r31 = <java.lang.System: java.io.PrintStream out>] -> $r31 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>("") -> return ->  End~~~1
Start -> r0 := @this: sor.SOR -> specialinvoke r0.<java.lang.Object: void <init>()>() -> return ->  End~~~1
Start -> r0 := @this: sor.JGFSORBench -> i0 := @parameter0: int -> specialinvoke r0.<sor.SOR: void <init>()>() -> $r1 = newarray (int)[3] -> $r1[0] = 1000 -> $r1[1] = 1500 -> $r1[2] = 2000 -> r0.<sor.JGFSORBench: int[] datasizes> = $r1 -> $r2 = new java.util.Random -> specialinvoke $r2.<java.util.Random: void <init>(long)>(10101010L) -> r0.<sor.JGFSORBench: java.util.Random R> = $r2 -> <sor.JGFSORBench: int nthreads> = i0 -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> r1 := @parameter0: java.lang.String -> r2 := @parameter1: java.lang.String -> i0 := @parameter2: int -> specialinvoke r0.<java.lang.Object: void <init>()>() -> r0.<jgfutil.JGFTimer: int size> = -1 -> r0.<jgfutil.JGFTimer: java.lang.String name> = r1 -> r0.<jgfutil.JGFTimer: java.lang.String opname> = r2 -> r0.<jgfutil.JGFTimer: int size> = i0 -> virtualinvoke r0.<jgfutil.JGFTimer: void reset()>() -> r0 := @this: jgfutil.JGFTimer -> r0.<jgfutil.JGFTimer: double time> = 0.0 -> r0.<jgfutil.JGFTimer: long calls> = 0L -> r0.<jgfutil.JGFTimer: double opcount> = 0.0 -> r0.<jgfutil.JGFTimer: boolean on> = 0 -> return -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> r1 := @parameter1: java.lang.String -> i0 := @parameter2: int -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r8 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r8 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r9 = new jgfutil.JGFTimer -> specialinvoke $r9.<jgfutil.JGFTimer: void <init>(java.lang.String,java.lang.String,int)>(r0, r1, i0) -> virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r9) -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> $z0 = r0.<jgfutil.JGFTimer: boolean on> -> if $z0 == 0 goto r0.<jgfutil.JGFTimer: boolean on> = 1 -> r0.<jgfutil.JGFTimer: boolean on> = 1 -> $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() -> r0.<jgfutil.JGFTimer: long start_time> = $l0 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void start()>() -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: sor.SORRunner -> i0 := @parameter0: int -> d0 := @parameter1: double -> r1 := @parameter2: double[][] -> i1 := @parameter3: int -> r2 := @parameter4: long[][] -> specialinvoke r0.<java.lang.Object: void <init>()>() -> r0.<sor.SORRunner: int id> = i0 -> r0.<sor.SORRunner: double omega> = d0 -> r0.<sor.SORRunner: double[][] G> = r1 -> r0.<sor.SORRunner: int num_iterations> = i1 -> r0.<sor.SORRunner: long[][] sync> = r2 -> return ->  End~~~1
Start -> r0 := @this: sor.SORRunner -> $r4 = r0.<sor.SORRunner: double[][] G> -> i0 = lengthof $r4 -> $r5 = r0.<sor.SORRunner: double[][] G> -> $r6 = $r5[0] -> i1 = lengthof $r6 -> $d2 = r0.<sor.SORRunner: double omega> -> d0 = $d2 * 0.25 -> $d3 = r0.<sor.SORRunner: double omega> -> d1 = 1.0 - $d3 -> i2 = i0 - 1 -> i3 = i1 - 1 -> i4 = i2 / 2 -> $i13 = <sor.JGFSORBench: int nthreads> -> $i14 = i4 + $i13 -> $i15 = $i14 - 1 -> $i16 = <sor.JGFSORBench: int nthreads> -> i5 = $i15 / $i16 -> i6 = i5 * 2 -> $i17 = r0.<sor.SORRunner: int id> -> $i18 = $i17 * i6 -> i7 = $i18 + 1 -> $i19 = r0.<sor.SORRunner: int id> -> $i20 = $i19 + 1 -> $i21 = $i20 * i6 -> i8 = $i21 + 1 -> if i8 <= i2 goto $i22 = r0.<sor.SORRunner: int id> -> $i22 = r0.<sor.SORRunner: int id> -> $i23 = <sor.JGFSORBench: int nthreads> -> $i24 = $i23 - 1 -> if $i22 != $i24 goto i9 = 0 -> i8 = i2 + 1 -> i9 = 0 -> goto [?= $i68 = r0.<sor.SORRunner: int num_iterations>] -> $i68 = r0.<sor.SORRunner: int num_iterations> -> $i69 = 2 * $i68 -> if i9 < $i69 goto $i25 = i9 % 2 -> $i25 = i9 % 2 -> i10 = i7 + $i25 -> goto [?= (branch)] -> if i10 < i8 goto $r7 = r0.<sor.SORRunner: double[][] G> -> $r7 = r0.<sor.SORRunner: double[][] G> -> r1 = $r7[i10] -> $r8 = r0.<sor.SORRunner: double[][] G> -> $i26 = i10 - 1 -> r2 = $r8[$i26] -> if i10 != 1 goto (branch) -> $r9 = r0.<sor.SORRunner: double[][] G> -> $i27 = i10 + 1 -> r3 = $r9[$i27] -> i11 = 1 -> if i11 < i3 goto $d4 = r2[i11] -> $d4 = r2[i11] -> $d5 = r3[i11] -> $d6 = $d4 + $d5 -> $i28 = i11 - 1 -> $d7 = r1[$i28] -> $d8 = $d6 + $d7 -> $i29 = i11 + 1 -> $d9 = r1[$i29] -> $d10 = $d8 + $d9 -> $d11 = d0 * $d10 -> $d12 = r1[i11] -> $d13 = d1 * $d12 -> $d14 = $d11 + $d13 -> r1[i11] = $d14 -> i11 = i11 + 2 -> goto [?= i10 = i10 + 2] -> i10 = i10 + 2 -> if i10 != i2 goto $r12 = r0.<sor.SORRunner: double[][] G> -> $r12 = r0.<sor.SORRunner: double[][] G> -> $i38 = i10 + 1 -> r13 = $r12[$i38] -> $r14 = r0.<sor.SORRunner: double[][] G> -> $i39 = i10 - 2 -> r15 = $r14[$i39] -> i12 = 1 -> if i12 < i3 goto $d26 = r2[i12] -> $d26 = r2[i12] -> $d27 = r13[i12] -> $d28 = $d26 + $d27 -> $i40 = i12 - 1 -> $d29 = r1[$i40] -> $d30 = $d28 + $d29 -> $i41 = i12 + 1 -> $d31 = r1[$i41] -> $d32 = $d30 + $d31 -> $d33 = d0 * $d32 -> $d34 = r1[i12] -> $d35 = d1 * $d34 -> $d36 = $d33 + $d35 -> r1[i12] = $d36 -> $i42 = i12 + 1 -> if $i42 == i3 goto i12 = i12 + 2 -> $i43 = i12 + 1 -> $i44 = i12 + 1 -> $d37 = r15[$i44] -> $i45 = i12 + 1 -> $d38 = r1[$i45] -> $d39 = $d37 + $d38 -> $d40 = r2[i12] -> $d41 = $d39 + $d40 -> $i46 = i12 + 2 -> $d42 = r2[$i46] -> $d43 = $d41 + $d42 -> $d44 = d0 * $d43 -> $i47 = i12 + 1 -> $d45 = r2[$i47] -> $d46 = d1 * $d45 -> $d47 = $d44 + $d46 -> r2[$i43] = $d47 -> i12 = i12 + 2 -> $r10 = r0.<sor.SORRunner: double[][] G> -> $i30 = i10 - 2 -> r11 = $r10[$i30] -> i31 = 1 -> if i31 < i3 goto $i32 = i31 + 1 -> $i32 = i31 + 1 -> if $i32 == i3 goto i31 = i31 + 2 -> $i33 = i31 + 1 -> $i34 = i31 + 1 -> $d15 = r11[$i34] -> $i35 = i31 + 1 -> $d16 = r1[$i35] -> $d17 = $d15 + $d16 -> $d18 = r2[i31] -> $d19 = $d17 + $d18 -> $i36 = i31 + 2 -> $d20 = r2[$i36] -> $d21 = $d19 + $d20 -> $d22 = d0 * $d21 -> $i37 = i31 + 1 -> $d23 = r2[$i37] -> $d24 = d1 * $d23 -> $d25 = $d22 + $d24 -> r2[$i33] = $d25 -> i31 = i31 + 2 -> $r16 = r0.<sor.SORRunner: long[][] sync> -> $i48 = r0.<sor.SORRunner: int id> -> $r17 = $r16[$i48] -> $b49 = 0 -> $l50 = $r17[$b49] -> $l51 = $l50 + 1L -> $r17[$b49] = $l51 -> $i52 = r0.<sor.SORRunner: int id> -> if $i52 <= 0 goto $i59 = r0.<sor.SORRunner: int id> -> $i59 = r0.<sor.SORRunner: int id> -> $i60 = <sor.JGFSORBench: int nthreads> -> $i61 = $i60 - 1 -> if $i59 >= $i61 goto i9 = i9 + 1 -> i9 = i9 + 1 -> return ->  End~~~48548697
Start -> r0 := @this: jgfutil.JGFTimer -> $d0 = r0.<jgfutil.JGFTimer: double time> -> $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() -> $l1 = r0.<jgfutil.JGFTimer: long start_time> -> $l2 = $l0 - $l1 -> $d1 = (double) $l2 -> $d2 = $d1 / 1000.0 -> $d3 = $d0 + $d2 -> r0.<jgfutil.JGFTimer: double time> = $d3 -> $z0 = r0.<jgfutil.JGFTimer: boolean on> -> if $z0 != 0 goto $l3 = r0.<jgfutil.JGFTimer: long calls> -> $l3 = r0.<jgfutil.JGFTimer: long calls> -> $l4 = $l3 + 1L -> r0.<jgfutil.JGFTimer: long calls> = $l4 -> r0.<jgfutil.JGFTimer: boolean on> = 0 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void stop()>() -> goto [?= return] -> return ->  End~~~1
Start -> d0 := @parameter0: double -> r0 := @parameter1: double[][] -> i0 := @parameter2: int -> i1 = lengthof r0 -> $r5 = r0[0] -> i2 = lengthof $r5 -> d1 = d0 * 0.25 -> d2 = 1.0 - d0 -> i3 = i1 - 1 -> i4 = i2 - 1 -> $i6 = <sor.JGFSORBench: int nthreads> -> r1 = newarray (sor.SORRunner)[$i6] -> $i7 = <sor.JGFSORBench: int nthreads> -> r2 = newarray (java.lang.Thread)[$i7] -> $i8 = <sor.JGFSORBench: int nthreads> -> i0 := @parameter0: int -> $i1 = <sor.JGFSORBench: int nthreads> -> r0 = newmultiarray (long)[$i1][128] -> i2 = 0 -> goto [?= $i3 = <sor.JGFSORBench: int nthreads>] -> $i3 = <sor.JGFSORBench: int nthreads> -> if i2 < $i3 goto $r1 = r0[i2] -> $r1 = r0[i2] -> $r1[0] = 0L -> i2 = i2 + 1 -> return r0 -> $r6 = staticinvoke <sor.SOR: long[][] init_sync(int)>($i8) -> <sor.SOR: long[][] sync> = $r6 -> staticinvoke <jgfutil.JGFInstrumentor: void startTimer(java.lang.String)>("Section2:SOR:Kernel") -> i5 = 1 -> goto [?= $i9 = <sor.JGFSORBench: int nthreads>] -> $i9 = <sor.JGFSORBench: int nthreads> -> if i5 < $i9 goto $r7 = new sor.SORRunner -> $r11 = new sor.SORRunner -> $r12 = <sor.SOR: long[][] sync> -> specialinvoke $r11.<sor.SORRunner: void <init>(int,double,double[][],int,long[][])>(0, d0, r0, i0, $r12) -> r1[0] = $r11 -> $r13 = r1[0] -> virtualinvoke $r13.<sor.SORRunner: void run()>() -> i10 = 1 -> goto [?= $i11 = <sor.JGFSORBench: int nthreads>] -> $i11 = <sor.JGFSORBench: int nthreads> -> if i10 < $i11 goto $r14 = r2[i10] -> staticinvoke <jgfutil.JGFInstrumentor: void stopTimer(java.lang.String)>("Section2:SOR:Kernel") -> i12 = 1 -> goto [?= (branch)] -> if i12 < i4 goto i13 = 1 -> i13 = 1 -> if i13 < i4 goto $d3 = <sor.SOR: double Gtotal> -> $d3 = <sor.SOR: double Gtotal> -> $r16 = r0[i12] -> $d4 = $r16[i13] -> $d5 = $d3 + $d4 -> <sor.SOR: double Gtotal> = $d5 -> i13 = i13 + 1 -> i12 = i12 + 1 -> return ->  End~~~872250
Start -> r0 := @this: jgfutil.JGFTimer -> d0 := @parameter0: double -> $d1 = r0.<jgfutil.JGFTimer: double opcount> -> $d2 = $d1 + d0 -> r0.<jgfutil.JGFTimer: double opcount> = $d2 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> d0 := @parameter1: double -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void addops(double)>(d0) -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> $r1 = r0.<jgfutil.JGFTimer: java.lang.String opname> -> $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("") -> if $z0 == 0 goto $i0 = r0.<jgfutil.JGFTimer: int size> -> $i0 = r0.<jgfutil.JGFTimer: int size> -> $r10 = <java.lang.System: java.io.PrintStream out> -> $r11 = new java.lang.StringBuilder -> $r12 = r0.<jgfutil.JGFTimer: java.lang.String name> -> $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12) -> specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13) -> $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":SizeA") -> $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t") -> $d1 = r0.<jgfutil.JGFTimer: double time> -> $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1) -> $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (s) \t ") -> r0 := @this: jgfutil.JGFTimer -> $d0 = r0.<jgfutil.JGFTimer: double opcount> -> $d1 = r0.<jgfutil.JGFTimer: double time> -> $d2 = $d0 / $d1 -> return $d2 -> $d2 = virtualinvoke r0.<jgfutil.JGFTimer: double perf()>() -> $f0 = (float) $d2 -> $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0) -> $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t") -> $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (") -> $r21 = r0.<jgfutil.JGFTimer: java.lang.String opname> -> $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) -> $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/s)") -> $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() -> virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r24) -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void print()>() -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: sor.JGFSORBench -> i0 := @parameter0: int -> staticinvoke <jgfutil.JGFInstrumentor: void addTimer(java.lang.String,java.lang.String,int)>("Section2:SOR:Kernel", "Iterations", i0) -> virtualinvoke r0.<sor.JGFSORBench: void JGFsetsize(int)>(i0) -> r0 := @this: sor.JGFSORBench -> i0 := @parameter0: int -> r0.<sor.JGFSORBench: int size> = i0 -> return -> virtualinvoke r0.<sor.JGFSORBench: void JGFinitialise()>() -> r0 := @this: sor.JGFSORBench -> return -> virtualinvoke r0.<sor.JGFSORBench: void JGFkernel()>() -> r0 := @this: sor.JGFSORBench -> $r2 = r0.<sor.JGFSORBench: int[] datasizes> -> $i0 = r0.<sor.JGFSORBench: int size> -> $i1 = $r2[$i0] -> $r3 = r0.<sor.JGFSORBench: int[] datasizes> -> $i2 = r0.<sor.JGFSORBench: int size> -> $i3 = $r3[$i2] -> $r4 = r0.<sor.JGFSORBench: java.util.Random R> -> i0 := @parameter0: int -> i1 := @parameter1: int -> r0 := @parameter2: java.util.Random -> r1 = newmultiarray (double)[i0][i1] -> i2 = 0 -> goto [?= (branch)] -> if i2 < i1 goto i3 = 0 -> i3 = 0 -> if i3 < i1 goto $r2 = r1[i2] -> $r2 = r1[i2] -> $d0 = virtualinvoke r0.<java.util.Random: double nextDouble()>() -> $d1 = $d0 * 1.0E-6 -> $r2[i3] = $d1 -> i3 = i3 + 1 -> i2 = i2 + 1 -> return r1 -> r1 = staticinvoke <sor.JGFSORBench: double[][] RandomMatrix(int,int,java.util.Random)>($i1, $i3, $r4) -> staticinvoke <sor.JGFSORBench: void SORrun(double,double[][],int)>(1.25, r1, 100) -> return -> virtualinvoke r0.<sor.JGFSORBench: void JGFvalidate()>() -> r0 := @this: sor.JGFSORBench -> $r2 = newarray (double)[3] -> $r2[0] = 0.498574406322512 -> $r2[1] = 1.1234778980135105 -> $r2[2] = 1.9954895063582696 -> r1 = $r2 -> $d1 = <sor.JGFSORBench: double Gtotal> -> $i0 = r0.<sor.JGFSORBench: int size> -> $d2 = r1[$i0] -> $d3 = $d1 - $d2 -> d0 = staticinvoke <java.lang.Math: double abs(double)>($d3) -> $b1 = d0 cmpl 1.0E-12 -> if $b1 <= 0 goto return -> return -> virtualinvoke r0.<sor.JGFSORBench: void JGFtidyup()>() -> r0 := @this: sor.JGFSORBench -> staticinvoke <java.lang.System: void gc()>() -> return -> staticinvoke <jgfutil.JGFInstrumentor: void addOpsToTimer(java.lang.String,double)>("Section2:SOR:Kernel", 100.0) -> staticinvoke <jgfutil.JGFInstrumentor: void printTimer(java.lang.String)>("Section2:SOR:Kernel") -> return ->  End~~~857998
Start -> r0 := @parameter0: java.lang.String[] -> $i1 = lengthof r0 -> if $i1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out> -> $r3 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("The no of threads has not been specified, defaulting to 1") -> $r4 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("  ") -> <JGFSORBenchSizeA: int nthreads> = 1 -> $i0 = <JGFSORBenchSizeA: int nthreads> -> staticinvoke <jgfutil.JGFInstrumentor: void printHeader(int,int,int)>(2, 0, $i0) -> $r5 = new sor.JGFSORBench -> $i3 = <JGFSORBenchSizeA: int nthreads> -> specialinvoke $r5.<sor.JGFSORBench: void <init>(int)>($i3) -> r1 = $r5 -> virtualinvoke r1.<sor.JGFSORBench: void JGFrun(int)>(0) -> return ->  End~~~1
