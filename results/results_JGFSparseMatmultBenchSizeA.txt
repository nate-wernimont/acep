Start -> $r0 = new java.util.Hashtable -> specialinvoke $r0.<java.util.Hashtable: void <init>()>() -> <jgfutil.JGFInstrumentor: java.util.Hashtable timers> = $r0 -> $r1 = new java.util.Hashtable -> specialinvoke $r1.<java.util.Hashtable: void <init>()>() -> <jgfutil.JGFInstrumentor: java.util.Hashtable data> = $r1 -> return -> i0 := @parameter0: int -> i1 := @parameter1: int -> i2 := @parameter2: int -> r0 = "" -> r1 = "Java Grande Forum Thread Benchmark Suite - Version 1.0 - Section " -> $r5 = new java.lang.StringBuilder -> $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) -> specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6) -> $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("2 - Size A") -> r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() -> goto [?= $r20 = <java.lang.System: java.io.PrintStream out>] -> $r20 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>(r0) -> if i2 != 1 goto $r26 = <java.lang.System: java.io.PrintStream out> -> $r21 = <java.lang.System: java.io.PrintStream out> -> $r22 = new java.lang.StringBuilder -> specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executing on ") -> $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2) -> $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" thread") -> $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() -> virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r25) -> goto [?= $r31 = <java.lang.System: java.io.PrintStream out>] -> $r31 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>("") -> return ->  End~~~1
Start -> return ->  End~~~1
Start -> $r0[0] = 50000 -> $r0[1] = 100000 -> $r0[2] = 500000 -> <sparsematmult.JGFSparseMatmultBench: int[] datasizes_M> = $r0 -> $r1 = newarray (int)[3] -> $r1[0] = 50000 -> $r1[1] = 100000 -> $r1[2] = 500000 -> <sparsematmult.JGFSparseMatmultBench: int[] datasizes_N> = $r1 -> $r2 = newarray (int)[3] -> $r2[0] = 250000 -> $r2[1] = 500000 -> $r2[2] = 2500000 -> <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz> = $r2 -> return ->  End~~~1
Start -> r0 := @this: sparsematmult.SparseMatmult -> specialinvoke r0.<java.lang.Object: void <init>()>() -> return ->  End~~~1
Start -> r0 := @this: sparsematmult.JGFSparseMatmultBench -> i0 := @parameter0: int -> specialinvoke r0.<sparsematmult.SparseMatmult: void <init>()>() -> $r1 = new java.util.Random -> specialinvoke $r1.<java.util.Random: void <init>(long)>(10101010L) -> r0.<sparsematmult.JGFSparseMatmultBench: java.util.Random R> = $r1 -> <sparsematmult.JGFSparseMatmultBench: int nthreads> = i0 -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> r1 := @parameter0: java.lang.String -> r2 := @parameter1: java.lang.String -> i0 := @parameter2: int -> specialinvoke r0.<java.lang.Object: void <init>()>() -> r0.<jgfutil.JGFTimer: int size> = -1 -> r0.<jgfutil.JGFTimer: java.lang.String name> = r1 -> r0.<jgfutil.JGFTimer: java.lang.String opname> = r2 -> r0.<jgfutil.JGFTimer: int size> = i0 -> virtualinvoke r0.<jgfutil.JGFTimer: void reset()>() -> r0 := @this: jgfutil.JGFTimer -> r0.<jgfutil.JGFTimer: double time> = 0.0 -> r0.<jgfutil.JGFTimer: long calls> = 0L -> r0.<jgfutil.JGFTimer: double opcount> = 0.0 -> r0.<jgfutil.JGFTimer: boolean on> = 0 -> return -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> r1 := @parameter1: java.lang.String -> i0 := @parameter2: int -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r8 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r8 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r9 = new jgfutil.JGFTimer -> specialinvoke $r9.<jgfutil.JGFTimer: void <init>(java.lang.String,java.lang.String,int)>(r0, r1, i0) -> virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r9) -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> $z0 = r0.<jgfutil.JGFTimer: boolean on> -> if $z0 == 0 goto r0.<jgfutil.JGFTimer: boolean on> = 1 -> r0.<jgfutil.JGFTimer: boolean on> = 1 -> $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() -> r0.<jgfutil.JGFTimer: long start_time> = $l0 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void start()>() -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: sparsematmult.SparseRunner -> i0 := @parameter0: int -> r1 := @parameter1: double[] -> r2 := @parameter2: int[] -> r3 := @parameter3: int[] -> r4 := @parameter4: double[] -> i1 := @parameter5: int -> i2 := @parameter6: int -> r5 := @parameter7: int[] -> r6 := @parameter8: int[] -> specialinvoke r0.<java.lang.Object: void <init>()>() -> r0.<sparsematmult.SparseRunner: int id> = i0 -> r0.<sparsematmult.SparseRunner: double[] x> = r4 -> r0.<sparsematmult.SparseRunner: double[] val> = r1 -> r0.<sparsematmult.SparseRunner: int[] col> = r3 -> r0.<sparsematmult.SparseRunner: int[] row> = r2 -> r0.<sparsematmult.SparseRunner: int nz> = i2 -> r0.<sparsematmult.SparseRunner: int NUM_ITERATIONS> = i1 -> r0.<sparsematmult.SparseRunner: int[] lowsum> = r5 -> r0.<sparsematmult.SparseRunner: int[] highsum> = r6 -> return ->  End~~~1
Start -> r0 := @this: sparsematmult.SparseRunner -> i0 = 0 -> goto [?= $i7 = r0.<sparsematmult.SparseRunner: int NUM_ITERATIONS>] -> $i7 = r0.<sparsematmult.SparseRunner: int NUM_ITERATIONS> -> if i0 < $i7 goto $r1 = r0.<sparsematmult.SparseRunner: int[] lowsum> -> $r1 = r0.<sparsematmult.SparseRunner: int[] lowsum> -> $i2 = r0.<sparsematmult.SparseRunner: int id> -> i1 = $r1[$i2] -> goto [?= $r7 = r0.<sparsematmult.SparseRunner: int[] highsum>] -> $r7 = r0.<sparsematmult.SparseRunner: int[] highsum> -> $i5 = r0.<sparsematmult.SparseRunner: int id> -> $i6 = $r7[$i5] -> if i1 < $i6 goto $r2 = <sparsematmult.SparseMatmult: double[] yt> -> $r2 = <sparsematmult.SparseMatmult: double[] yt> -> $r3 = r0.<sparsematmult.SparseRunner: int[] row> -> $i3 = $r3[i1] -> $d0 = $r2[$i3] -> $r4 = r0.<sparsematmult.SparseRunner: double[] x> -> $r5 = r0.<sparsematmult.SparseRunner: int[] col> -> $i4 = $r5[i1] -> $d1 = $r4[$i4] -> $r6 = r0.<sparsematmult.SparseRunner: double[] val> -> $d2 = $r6[i1] -> $d3 = $d1 * $d2 -> $d4 = $d0 + $d3 -> $r2[$i3] = $d4 -> i1 = i1 + 1 -> i0 = i0 + 1 -> return ->  End~~~47368598
Start -> r0 := @this: jgfutil.JGFTimer -> $d0 = r0.<jgfutil.JGFTimer: double time> -> $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() -> $l1 = r0.<jgfutil.JGFTimer: long start_time> -> $l2 = $l0 - $l1 -> $d1 = (double) $l2 -> $d2 = $d1 / 1000.0 -> $d3 = $d0 + $d2 -> r0.<jgfutil.JGFTimer: double time> = $d3 -> $z0 = r0.<jgfutil.JGFTimer: boolean on> -> if $z0 != 0 goto $l3 = r0.<jgfutil.JGFTimer: long calls> -> $l3 = r0.<jgfutil.JGFTimer: long calls> -> $l4 = $l3 + 1L -> r0.<jgfutil.JGFTimer: long calls> = $l4 -> r0.<jgfutil.JGFTimer: boolean on> = 0 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void stop()>() -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @parameter0: double[] -> r1 := @parameter1: double[] -> r2 := @parameter2: int[] -> r3 := @parameter3: int[] -> r4 := @parameter4: double[] -> i0 := @parameter5: int -> r5 := @parameter6: int[] -> r6 := @parameter7: int[] -> i1 = lengthof r1 -> <sparsematmult.SparseMatmult: double[] yt> = r0 -> $i3 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> r7 = newarray (sparsematmult.SparseRunner)[$i3] -> $i4 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> r8 = newarray (java.lang.Thread)[$i4] -> staticinvoke <jgfutil.JGFInstrumentor: void startTimer(java.lang.String)>("Section2:SparseMatmult:Kernel") -> i2 = 1 -> goto [?= $i5 = <sparsematmult.JGFSparseMatmultBench: int nthreads>] -> $i5 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> if i2 < $i5 goto $r9 = new sparsematmult.SparseRunner -> $r14 = new sparsematmult.SparseRunner -> specialinvoke $r14.<sparsematmult.SparseRunner: void <init>(int,double[],int[],int[],double[],int,int,int[],int[])>(0, r1, r2, r3, r4, i0, i1, r5, r6) -> r7[0] = $r14 -> $r15 = r7[0] -> virtualinvoke $r15.<sparsematmult.SparseRunner: void run()>() -> i6 = 1 -> goto [?= $i7 = <sparsematmult.JGFSparseMatmultBench: int nthreads>] -> $i7 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> if i6 < $i7 goto $r16 = r8[i6] -> staticinvoke <jgfutil.JGFInstrumentor: void stopTimer(java.lang.String)>("Section2:SparseMatmult:Kernel") -> i8 = 0 -> goto [?= (branch)] -> if i8 < i1 goto $d0 = <sparsematmult.SparseMatmult: double ytotal> -> $d0 = <sparsematmult.SparseMatmult: double ytotal> -> $r18 = <sparsematmult.SparseMatmult: double[] yt> -> $i9 = r2[i8] -> $d1 = $r18[$i9] -> $d2 = $d0 + $d1 -> <sparsematmult.SparseMatmult: double ytotal> = $d2 -> i8 = i8 + 1 -> return ->  End~~~222222
Start -> r0 := @this: jgfutil.JGFTimer -> d0 := @parameter0: double -> $d1 = r0.<jgfutil.JGFTimer: double opcount> -> $d2 = $d1 + d0 -> r0.<jgfutil.JGFTimer: double opcount> = $d2 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> d0 := @parameter1: double -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void addops(double)>(d0) -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> $r1 = r0.<jgfutil.JGFTimer: java.lang.String opname> -> $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("") -> if $z0 == 0 goto $i0 = r0.<jgfutil.JGFTimer: int size> -> $i0 = r0.<jgfutil.JGFTimer: int size> -> $r10 = <java.lang.System: java.io.PrintStream out> -> $r11 = new java.lang.StringBuilder -> $r12 = r0.<jgfutil.JGFTimer: java.lang.String name> -> $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12) -> specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13) -> $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":SizeA") -> $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t") -> $d1 = r0.<jgfutil.JGFTimer: double time> -> $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1) -> $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (s) \t ") -> r0 := @this: jgfutil.JGFTimer -> $d0 = r0.<jgfutil.JGFTimer: double opcount> -> $d1 = r0.<jgfutil.JGFTimer: double time> -> $d2 = $d0 / $d1 -> return $d2 -> $d2 = virtualinvoke r0.<jgfutil.JGFTimer: double perf()>() -> $f0 = (float) $d2 -> $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0) -> $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t") -> $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (") -> $r21 = r0.<jgfutil.JGFTimer: java.lang.String opname> -> $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) -> $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/s)") -> $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() -> virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r24) -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void print()>() -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: sparsematmult.JGFSparseMatmultBench -> i0 := @parameter0: int -> staticinvoke <jgfutil.JGFInstrumentor: void addTimer(java.lang.String,java.lang.String,int)>("Section2:SparseMatmult:Kernel", "Iterations", i0) -> virtualinvoke r0.<sparsematmult.JGFSparseMatmultBench: void JGFsetsize(int)>(i0) -> r0 := @this: sparsematmult.JGFSparseMatmultBench -> i0 := @parameter0: int -> r0.<sparsematmult.JGFSparseMatmultBench: int size> = i0 -> return -> virtualinvoke r0.<sparsematmult.JGFSparseMatmultBench: void JGFinitialise()>() -> r0 := @this: sparsematmult.JGFSparseMatmultBench -> $r1 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_N> -> $i3 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i4 = $r1[$i3] -> $r9 = r0.<sparsematmult.JGFSparseMatmultBench: java.util.Random R> -> i0 := @parameter0: int -> r0 := @parameter1: java.util.Random -> r1 = newarray (double)[i0] -> i1 = 0 -> goto [?= (branch)] -> if i1 < i0 goto $d0 = virtualinvoke r0.<java.util.Random: double nextDouble()>() -> $d0 = virtualinvoke r0.<java.util.Random: double nextDouble()>() -> $d1 = $d0 * 1.0E-6 -> r1[i1] = $d1 -> i1 = i1 + 1 -> return r1 -> $r10 = staticinvoke <sparsematmult.JGFSparseMatmultBench: double[] RandomVector(int,java.util.Random)>($i4, $r9) -> r0.<sparsematmult.JGFSparseMatmultBench: double[] x> = $r10 -> $r11 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_M> -> $i5 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i6 = $r11[$i5] -> $r12 = newarray (double)[$i6] -> r0.<sparsematmult.JGFSparseMatmultBench: double[] y> = $r12 -> $r13 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz> -> $i7 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i8 = $r13[$i7] -> $r14 = newarray (double)[$i8] -> r0.<sparsematmult.JGFSparseMatmultBench: double[] val> = $r14 -> $r15 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz> -> $i9 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i10 = $r15[$i9] -> $r16 = newarray (int)[$i10] -> r0.<sparsematmult.JGFSparseMatmultBench: int[] col> = $r16 -> $r17 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz> -> $i11 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i12 = $r17[$i11] -> $r18 = newarray (int)[$i12] -> r0.<sparsematmult.JGFSparseMatmultBench: int[] row> = $r18 -> $i13 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> r2 = newarray (int)[$i13] -> $i14 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> r3 = newarray (int)[$i14] -> $i15 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> $i16 = $i15 + 1 -> r4 = newarray (int)[$i16] -> $i17 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> $i18 = $i17 + 1 -> $r19 = newarray (int)[$i18] -> r0.<sparsematmult.JGFSparseMatmultBench: int[] lowsum> = $r19 -> $i19 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> $i20 = $i19 + 1 -> $r20 = newarray (int)[$i20] -> r0.<sparsematmult.JGFSparseMatmultBench: int[] highsum> = $r20 -> $r21 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz> -> $i21 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i22 = $r21[$i21] -> r5 = newarray (int)[$i22] -> $r22 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz> -> $i23 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i24 = $r22[$i23] -> r6 = newarray (int)[$i24] -> $r23 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz> -> $i25 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i26 = $r23[$i25] -> r7 = newarray (double)[$i26] -> i0 = 0 -> goto [?= $r31 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz>] -> $r31 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz> -> $i37 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i38 = $r31[$i37] -> if i0 < $i38 goto $r24 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $r24 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $r25 = r0.<sparsematmult.JGFSparseMatmultBench: java.util.Random R> -> $i27 = virtualinvoke $r25.<java.util.Random: int nextInt()>() -> $i28 = staticinvoke <java.lang.Math: int abs(int)>($i27) -> $r8 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_M> -> $i29 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i30 = $r8[$i29] -> $i31 = $i28 % $i30 -> $r24[i0] = $i31 -> $r26 = r0.<sparsematmult.JGFSparseMatmultBench: int[] col> -> $r27 = r0.<sparsematmult.JGFSparseMatmultBench: java.util.Random R> -> $i32 = virtualinvoke $r27.<java.util.Random: int nextInt()>() -> $i33 = staticinvoke <java.lang.Math: int abs(int)>($i32) -> $r28 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_N> -> $i34 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i35 = $r28[$i34] -> $i36 = $i33 % $i35 -> $r26[i0] = $i36 -> $r29 = r0.<sparsematmult.JGFSparseMatmultBench: double[] val> -> $r30 = r0.<sparsematmult.JGFSparseMatmultBench: java.util.Random R> -> $d0 = virtualinvoke $r30.<java.util.Random: double nextDouble()>() -> $r29[i0] = $d0 -> i0 = i0 + 1 -> $r32 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_M> -> $i39 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i40 = $r32[$i39] -> $i41 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> $i42 = $i40 + $i41 -> $i43 = $i42 - 1 -> $i44 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> i1 = $i43 / $i44 -> i45 = 0 -> goto [?= $i55 = <sparsematmult.JGFSparseMatmultBench: int nthreads>] -> $i55 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> if i45 < $i55 goto $i46 = i45 * i1 -> $i46 = i45 * i1 -> r2[i45] = $i46 -> $i47 = i45 + 1 -> $i48 = $i47 * i1 -> $i49 = $i48 - 1 -> r3[i45] = $i49 -> $i50 = r3[i45] -> $r33 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_M> -> $i51 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i52 = $r33[$i51] -> if $i50 <= $i52 goto i45 = i45 + 1 -> i45 = i45 + 1 -> i56 = 0 -> goto [?= $r38 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz>] -> $r38 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz> -> $i65 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i66 = $r38[$i65] -> if i56 < $i66 goto i2 = 0 -> i2 = 0 -> goto [?= $i64 = <sparsematmult.JGFSparseMatmultBench: int nthreads>] -> $i64 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> if i2 < $i64 goto $r35 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $r35 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $i57 = $r35[i56] -> $i58 = r2[i2] -> if $i57 < $i58 goto i2 = i2 + 1 -> $r36 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $i59 = $r36[i56] -> $i60 = r3[i2] -> if $i59 > $i60 goto i2 = i2 + 1 -> $i61 = i2 + 1 -> $i62 = r4[$i61] -> $i63 = $i62 + 1 -> r4[$i61] = $i63 -> i2 = i2 + 1 -> i56 = i56 + 1 -> i67 = 0 -> goto [?= $i77 = <sparsematmult.JGFSparseMatmultBench: int nthreads>] -> $i77 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> if i67 < $i77 goto i68 = 0 -> i68 = 0 -> goto [?= (branch)] -> if i68 <= i67 goto $r39 = r0.<sparsematmult.JGFSparseMatmultBench: int[] lowsum> -> $r39 = r0.<sparsematmult.JGFSparseMatmultBench: int[] lowsum> -> $r40 = r0.<sparsematmult.JGFSparseMatmultBench: int[] lowsum> -> $i69 = $r40[i67] -> $i70 = i67 - i68 -> $i71 = r4[$i70] -> $i72 = $i69 + $i71 -> $r39[i67] = $i72 -> $r41 = r0.<sparsematmult.JGFSparseMatmultBench: int[] highsum> -> $r42 = r0.<sparsematmult.JGFSparseMatmultBench: int[] highsum> -> $i73 = $r42[i67] -> $i74 = i67 - i68 -> $i75 = r4[$i74] -> $i76 = $i73 + $i75 -> $r41[i67] = $i76 -> i68 = i68 + 1 -> i67 = i67 + 1 -> i78 = 0 -> goto [?= $r52 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz>] -> $r52 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz> -> $i93 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i94 = $r52[$i93] -> if i78 < $i94 goto i79 = 0 -> i79 = 0 -> goto [?= $i92 = <sparsematmult.JGFSparseMatmultBench: int nthreads>] -> $i92 = <sparsematmult.JGFSparseMatmultBench: int nthreads> -> if i79 < $i92 goto $r43 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $r43 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $i80 = $r43[i78] -> $i81 = r2[i79] -> if $i80 < $i81 goto i79 = i79 + 1 -> $r44 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $i82 = $r44[i78] -> $i83 = r3[i79] -> if $i82 > $i83 goto i79 = i79 + 1 -> $r45 = r0.<sparsematmult.JGFSparseMatmultBench: int[] highsum> -> $i84 = $r45[i79] -> $r46 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $i85 = $r46[i78] -> r5[$i84] = $i85 -> $r47 = r0.<sparsematmult.JGFSparseMatmultBench: int[] highsum> -> $i86 = $r47[i79] -> $r48 = r0.<sparsematmult.JGFSparseMatmultBench: int[] col> -> $i87 = $r48[i78] -> r6[$i86] = $i87 -> $r49 = r0.<sparsematmult.JGFSparseMatmultBench: int[] highsum> -> $i88 = $r49[i79] -> $r50 = r0.<sparsematmult.JGFSparseMatmultBench: double[] val> -> $d1 = $r50[i78] -> r7[$i88] = $d1 -> $r51 = r0.<sparsematmult.JGFSparseMatmultBench: int[] highsum> -> $i90 = $r51[i79] -> $i91 = $i90 + 1 -> $r51[i79] = $i91 -> i79 = i79 + 1 -> i78 = i78 + 1 -> i95 = 0 -> goto [?= $r56 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz>] -> $r56 = <sparsematmult.JGFSparseMatmultBench: int[] datasizes_nz> -> $i98 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $i99 = $r56[$i98] -> if i95 < $i99 goto $r53 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $r53 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $i96 = r5[i95] -> $r53[i95] = $i96 -> $r54 = r0.<sparsematmult.JGFSparseMatmultBench: int[] col> -> $i97 = r6[i95] -> $r54[i95] = $i97 -> $r55 = r0.<sparsematmult.JGFSparseMatmultBench: double[] val> -> $d2 = r7[i95] -> $r55[i95] = $d2 -> i95 = i95 + 1 -> return -> virtualinvoke r0.<sparsematmult.JGFSparseMatmultBench: void JGFkernel()>() -> r0 := @this: sparsematmult.JGFSparseMatmultBench -> $r1 = r0.<sparsematmult.JGFSparseMatmultBench: double[] y> -> $r2 = r0.<sparsematmult.JGFSparseMatmultBench: double[] val> -> $r3 = r0.<sparsematmult.JGFSparseMatmultBench: int[] row> -> $r4 = r0.<sparsematmult.JGFSparseMatmultBench: int[] col> -> $r5 = r0.<sparsematmult.JGFSparseMatmultBench: double[] x> -> $r6 = r0.<sparsematmult.JGFSparseMatmultBench: int[] lowsum> -> $r7 = r0.<sparsematmult.JGFSparseMatmultBench: int[] highsum> -> staticinvoke <sparsematmult.SparseMatmult: void test(double[],double[],int[],int[],double[],int,int[],int[])>($r1, $r2, $r3, $r4, $r5, 200, $r6, $r7) -> return -> virtualinvoke r0.<sparsematmult.JGFSparseMatmultBench: void JGFvalidate()>() -> r0 := @this: sparsematmult.JGFSparseMatmultBench -> $r2 = newarray (double)[3] -> $r2[0] = 75.02484945753453 -> $r2[1] = 150.0130719633895 -> $r2[2] = 749.5245870753752 -> r1 = $r2 -> $d1 = <sparsematmult.JGFSparseMatmultBench: double ytotal> -> $i0 = r0.<sparsematmult.JGFSparseMatmultBench: int size> -> $d2 = r1[$i0] -> $d3 = $d1 - $d2 -> d0 = staticinvoke <java.lang.Math: double abs(double)>($d3) -> $b1 = d0 cmpl 1.0E-10 -> if $b1 <= 0 goto return -> return -> virtualinvoke r0.<sparsematmult.JGFSparseMatmultBench: void JGFtidyup()>() -> r0 := @this: sparsematmult.JGFSparseMatmultBench -> staticinvoke <java.lang.System: void gc()>() -> return -> staticinvoke <jgfutil.JGFInstrumentor: void addOpsToTimer(java.lang.String,double)>("Section2:SparseMatmult:Kernel", 200.0) -> staticinvoke <jgfutil.JGFInstrumentor: void printTimer(java.lang.String)>("Section2:SparseMatmult:Kernel") -> return ->  End~~~1182733
Start -> $i3 = <JGFSparseMatmultBenchSizeA: int nthreads> -> specialinvoke $r5.<sparsematmult.JGFSparseMatmultBench: void <init>(int)>($i3) -> r1 = $r5 -> virtualinvoke r1.<sparsematmult.JGFSparseMatmultBench: void JGFrun(int)>(0) -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String[] -> $i1 = lengthof r0 -> if $i1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out> -> $r3 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("The no of threads has not been specified, defaulting to 1") -> $r4 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("  ") -> <JGFSparseMatmultBenchSizeA: int nthreads> = 1 -> $i0 = <JGFSparseMatmultBenchSizeA: int nthreads> -> staticinvoke <jgfutil.JGFInstrumentor: void printHeader(int,int,int)>(2, 0, $i0) ->  End~~~1
Start -> <sparsematmult.SparseMatmult: double ytotal> = 0.0 -> $r0 = newarray (int)[3] -> $r5 = new sparsematmult.JGFSparseMatmultBench ->  End~~~1
