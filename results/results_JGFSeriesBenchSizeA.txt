Start -> i0 := @parameter0: int -> i1 := @parameter1: int -> i2 := @parameter2: int -> r0 = "" -> r1 = "Java Grande Forum Thread Benchmark Suite - Version 1.0 - Section " -> $r5 = new java.lang.StringBuilder -> $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) -> specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6) -> $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("2 - Size A") -> r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() -> goto [?= $r20 = <java.lang.System: java.io.PrintStream out>] -> $r20 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>(r0) -> if i2 != 1 goto $r26 = <java.lang.System: java.io.PrintStream out> -> $r21 = <java.lang.System: java.io.PrintStream out> -> $r22 = new java.lang.StringBuilder -> specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executing on ") -> $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2) -> $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" thread") -> $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() -> virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r25) -> goto [?= $r31 = <java.lang.System: java.io.PrintStream out>] -> $r31 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>("") -> return ->  End~~~1
Start -> r0 := @this: series.SeriesTest -> specialinvoke r0.<java.lang.Object: void <init>()>() -> return ->  End~~~1
Start -> r0 := @this: series.JGFSeriesBench -> i0 := @parameter0: int -> specialinvoke r0.<series.SeriesTest: void <init>()>() -> $r1 = newarray (int)[3] -> $r1[0] = 10000 -> $r1[1] = 100000 -> $r1[2] = 1000000 -> r0.<series.JGFSeriesBench: int[] datasizes> = $r1 -> <series.JGFSeriesBench: int nthreads> = i0 -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> r1 := @parameter0: java.lang.String -> r2 := @parameter1: java.lang.String -> i0 := @parameter2: int -> specialinvoke r0.<java.lang.Object: void <init>()>() -> r0.<jgfutil.JGFTimer: int size> = -1 -> r0.<jgfutil.JGFTimer: java.lang.String name> = r1 -> r0.<jgfutil.JGFTimer: java.lang.String opname> = r2 -> r0.<jgfutil.JGFTimer: int size> = i0 -> virtualinvoke r0.<jgfutil.JGFTimer: void reset()>() -> r0 := @this: jgfutil.JGFTimer -> r0.<jgfutil.JGFTimer: double time> = 0.0 -> r0.<jgfutil.JGFTimer: long calls> = 0L -> r0.<jgfutil.JGFTimer: double opcount> = 0.0 -> r0.<jgfutil.JGFTimer: boolean on> = 0 -> return -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> r1 := @parameter1: java.lang.String -> i0 := @parameter2: int -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r8 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r8 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r9 = new jgfutil.JGFTimer -> specialinvoke $r9.<jgfutil.JGFTimer: void <init>(java.lang.String,java.lang.String,int)>(r0, r1, i0) -> virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r9) -> return ->  End~~~1
Start -> r0 := @this: series.SeriesTest -> $i0 = <series.SeriesTest: int array_rows> -> $r1 = newmultiarray (double)[2][$i0] -> <series.SeriesTest: double[][] TestArray> = $r1 -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> $z0 = r0.<jgfutil.JGFTimer: boolean on> -> if $z0 == 0 goto r0.<jgfutil.JGFTimer: boolean on> = 1 -> r0.<jgfutil.JGFTimer: boolean on> = 1 -> $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() -> r0.<jgfutil.JGFTimer: long start_time> = $l0 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void start()>() -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: series.SeriesRunner -> i0 := @parameter0: int -> specialinvoke r0.<java.lang.Object: void <init>()>() -> r0.<series.SeriesRunner: int id> = i0 -> return ->  End~~~1
Start -> r0 := @this: series.SeriesRunner -> $i4 = r0.<series.SeriesRunner: int id> -> if $i4 != 0 goto d0 = 3.141592653589793 -> $r1 = <series.SeriesTest: double[][] TestArray> -> $r2 = $r1[0] -> r0 := @this: series.SeriesRunner -> d0 := @parameter0: double -> d1 := @parameter1: double -> i0 := @parameter2: int -> d2 := @parameter3: double -> i1 := @parameter4: int -> d3 = d0 -> $d6 = d1 - d0 -> $d7 = (double) i0 -> d4 = $d6 / $d7 -> r0 := @this: series.SeriesRunner -> d0 := @parameter0: double -> d1 := @parameter1: double -> i0 := @parameter2: int -> $d2 = d0 + 1.0 -> $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, d0) -> return $d3 -> $d8 = specialinvoke r0.<series.SeriesRunner: double thefunction(double,double,int)>(d0, d2, i1) -> d5 = $d8 / 2.0 -> if i0 == 1 goto $d10 = specialinvoke r0.<series.SeriesRunner: double thefunction(double,double,int)>(d1, d2, i1) -> i2 = i0 + -1 -> goto [?= i2 = i2 + -1] -> i2 = i2 + -1 -> if i2 > 0 goto d3 = d3 + d4 -> d3 = d3 + d4 -> $d9 = specialinvoke r0.<series.SeriesRunner: double thefunction(double,double,int)>(d3, d2, i1) -> d5 = d5 + $d9 -> $d10 = specialinvoke r0.<series.SeriesRunner: double thefunction(double,double,int)>(d1, d2, i1) -> $d11 = $d10 / 2.0 -> $d12 = d5 + $d11 -> d13 = $d12 * d4 -> return d13 -> $d1 = specialinvoke r0.<series.SeriesRunner: double TrapezoidIntegrate(double,double,int,double,int)>(0.0, 2.0, 1000, 0.0, 0) -> $d2 = $d1 / 2.0 -> $r2[0] = $d2 -> d0 = 3.141592653589793 -> $i5 = <series.SeriesTest: int array_rows> -> $i6 = <series.JGFSeriesBench: int nthreads> -> $i7 = $i5 + $i6 -> $i8 = $i7 - 1 -> $i9 = <series.JGFSeriesBench: int nthreads> -> i0 = $i8 / $i9 -> $i10 = r0.<series.SeriesRunner: int id> -> i1 = $i10 * i0 -> $i11 = r0.<series.SeriesRunner: int id> -> if $i11 != 0 goto $i14 = r0.<series.SeriesRunner: int id> -> $i12 = r0.<series.SeriesRunner: int id> -> $i13 = $i12 * i0 -> i1 = $i13 + 1 -> $i14 = r0.<series.SeriesRunner: int id> -> $i15 = $i14 + 1 -> i2 = $i15 * i0 -> $i16 = <series.SeriesTest: int array_rows> -> if i2 <= $i16 goto i3 = i1 -> i3 = i1 -> goto [?= (branch)] -> if i3 < i2 goto $r3 = <series.SeriesTest: double[][] TestArray> -> $r3 = <series.SeriesTest: double[][] TestArray> -> $r4 = $r3[0] -> $d3 = (double) i3 -> $d4 = d0 * $d3 -> $d4 = d0 + 1.0 -> $d5 = staticinvoke <java.lang.Math: double pow(double,double)>($d4, d0) -> $d6 = d1 * d0 -> $d7 = staticinvoke <java.lang.Math: double cos(double)>($d6) -> $d8 = $d5 * $d7 -> return $d8 -> $d5 = specialinvoke r0.<series.SeriesRunner: double TrapezoidIntegrate(double,double,int,double,int)>(0.0, 2.0, 1000, $d4, 1) -> $r4[i3] = $d5 -> $r5 = <series.SeriesTest: double[][] TestArray> -> $r6 = $r5[1] -> $d6 = (double) i3 -> $d7 = d0 * $d6 -> $d9 = d0 + 1.0 -> $d10 = staticinvoke <java.lang.Math: double pow(double,double)>($d9, d0) -> $d11 = d1 * d0 -> $d12 = staticinvoke <java.lang.Math: double sin(double)>($d11) -> $d13 = $d10 * $d12 -> return $d13 -> $d8 = specialinvoke r0.<series.SeriesRunner: double TrapezoidIntegrate(double,double,int,double,int)>(0.0, 2.0, 1000, $d7, 2) -> $r6[i3] = $d8 -> i3 = i3 + 1 -> return ->  End~~~18739046
Start -> r0 := @this: jgfutil.JGFTimer -> $d0 = r0.<jgfutil.JGFTimer: double time> -> $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() -> $l1 = r0.<jgfutil.JGFTimer: long start_time> -> $l2 = $l0 - $l1 -> $d1 = (double) $l2 -> $d2 = $d1 / 1000.0 -> $d3 = $d0 + $d2 -> r0.<jgfutil.JGFTimer: double time> = $d3 -> $z0 = r0.<jgfutil.JGFTimer: boolean on> -> if $z0 != 0 goto $l3 = r0.<jgfutil.JGFTimer: long calls> -> $l3 = r0.<jgfutil.JGFTimer: long calls> -> $l4 = $l3 + 1L -> r0.<jgfutil.JGFTimer: long calls> = $l4 -> r0.<jgfutil.JGFTimer: boolean on> = 0 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void stop()>() -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: series.SeriesTest -> $i0 = <series.JGFSeriesBench: int nthreads> -> r1 = newarray (java.lang.Runnable)[$i0] -> $i2 = <series.JGFSeriesBench: int nthreads> -> r2 = newarray (java.lang.Thread)[$i2] -> staticinvoke <jgfutil.JGFInstrumentor: void startTimer(java.lang.String)>("Section2:Series:Kernel") -> i1 = 1 -> goto [?= $i3 = <series.JGFSeriesBench: int nthreads>] -> $i3 = <series.JGFSeriesBench: int nthreads> -> if i1 < $i3 goto $r3 = new series.SeriesRunner -> $r8 = new series.SeriesRunner -> specialinvoke $r8.<series.SeriesRunner: void <init>(int)>(0) -> r1[0] = $r8 -> $r9 = r1[0] -> interfaceinvoke $r9.<java.lang.Runnable: void run()>() -> i4 = 1 -> goto [?= $i5 = <series.JGFSeriesBench: int nthreads>] -> $i5 = <series.JGFSeriesBench: int nthreads> -> if i4 < $i5 goto $r10 = r2[i4] -> staticinvoke <jgfutil.JGFInstrumentor: void stopTimer(java.lang.String)>("Section2:Series:Kernel") -> return ->  End~~~1
Start -> r0 := @this: series.SeriesTest -> <series.SeriesTest: double[][] TestArray> = null -> staticinvoke <java.lang.System: void gc()>() -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> d0 := @parameter0: double -> $d1 = r0.<jgfutil.JGFTimer: double opcount> -> $d2 = $d1 + d0 -> r0.<jgfutil.JGFTimer: double opcount> = $d2 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> d0 := @parameter1: double -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void addops(double)>(d0) -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> $r1 = r0.<jgfutil.JGFTimer: java.lang.String opname> -> $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("") -> if $z0 == 0 goto $i0 = r0.<jgfutil.JGFTimer: int size> -> $i0 = r0.<jgfutil.JGFTimer: int size> -> $r10 = <java.lang.System: java.io.PrintStream out> -> $r11 = new java.lang.StringBuilder -> $r12 = r0.<jgfutil.JGFTimer: java.lang.String name> -> $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12) -> specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13) -> $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":SizeA") -> $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t") -> $d1 = r0.<jgfutil.JGFTimer: double time> -> $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1) -> $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (s) \t ") -> r0 := @this: jgfutil.JGFTimer -> $d0 = r0.<jgfutil.JGFTimer: double opcount> -> $d1 = r0.<jgfutil.JGFTimer: double time> -> $d2 = $d0 / $d1 -> return $d2 -> $d2 = virtualinvoke r0.<jgfutil.JGFTimer: double perf()>() -> $f0 = (float) $d2 -> $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0) -> $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t") -> $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (") -> $r21 = r0.<jgfutil.JGFTimer: java.lang.String opname> -> $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) -> $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/s)") -> $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() -> virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r24) -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void print()>() -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: series.JGFSeriesBench -> i0 := @parameter0: int -> staticinvoke <jgfutil.JGFInstrumentor: void addTimer(java.lang.String,java.lang.String,int)>("Section2:Series:Kernel", "coefficients", i0) -> virtualinvoke r0.<series.JGFSeriesBench: void JGFsetsize(int)>(i0) -> r0 := @this: series.JGFSeriesBench -> i0 := @parameter0: int -> r0.<series.JGFSeriesBench: int size> = i0 -> return -> virtualinvoke r0.<series.JGFSeriesBench: void JGFinitialise()>() -> r0 := @this: series.JGFSeriesBench -> $r1 = r0.<series.JGFSeriesBench: int[] datasizes> -> $i0 = r0.<series.JGFSeriesBench: int size> -> $i1 = $r1[$i0] -> <series.JGFSeriesBench: int array_rows> = $i1 -> virtualinvoke r0.<series.JGFSeriesBench: void buildTestData()>() -> return -> virtualinvoke r0.<series.JGFSeriesBench: void JGFkernel()>() -> r0 := @this: series.JGFSeriesBench -> virtualinvoke r0.<series.JGFSeriesBench: void Do()>() -> return -> virtualinvoke r0.<series.JGFSeriesBench: void JGFvalidate()>() -> r0 := @this: series.JGFSeriesBench -> $r2 = newarray (double[])[4] -> $r3 = newarray (double)[2] -> $r3[0] = 2.8729524964837996 -> $r3[1] = 0.0 -> $r2[0] = $r3 -> $r4 = newarray (double)[2] -> $r4[0] = 1.1161046676147888 -> $r4[1] = -1.8819691893398025 -> $r2[1] = $r4 -> $r5 = newarray (double)[2] -> $r5[0] = 0.34429060398168704 -> $r5[1] = -1.1645642623320958 -> $r2[2] = $r5 -> $r6 = newarray (double)[2] -> $r6[0] = 0.15238898702519288 -> $r6[1] = -0.8143461113044298 -> $r2[3] = $r6 -> r1 = $r2 -> i0 = 0 -> goto [?= (branch)] -> if i0 < 4 goto i1 = 0 -> i1 = 0 -> if i1 < 2 goto $r7 = <series.JGFSeriesBench: double[][] TestArray> -> $r7 = <series.JGFSeriesBench: double[][] TestArray> -> $r8 = $r7[i1] -> $d1 = $r8[i0] -> $r9 = r1[i0] -> $d2 = $r9[i1] -> $d3 = $d1 - $d2 -> d0 = staticinvoke <java.lang.Math: double abs(double)>($d3) -> $b2 = d0 cmpl 1.0E-12 -> if $b2 <= 0 goto i1 = i1 + 1 -> i1 = i1 + 1 -> i0 = i0 + 1 -> return -> virtualinvoke r0.<series.JGFSeriesBench: void JGFtidyup()>() -> r0 := @this: series.JGFSeriesBench -> virtualinvoke r0.<series.JGFSeriesBench: void freeTestData()>() -> return -> $i1 = <series.JGFSeriesBench: int array_rows> -> $i2 = $i1 * 2 -> $i3 = $i2 - 1 -> $d0 = (double) $i3 -> staticinvoke <jgfutil.JGFInstrumentor: void addOpsToTimer(java.lang.String,double)>("Section2:Series:Kernel", $d0) -> staticinvoke <jgfutil.JGFInstrumentor: void printTimer(java.lang.String)>("Section2:Series:Kernel") -> return ->  End~~~7
Start -> r0 := @parameter0: java.lang.String[] -> $i1 = lengthof r0 -> if $i1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out> -> $r3 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("The no of threads has not been specified, defaulting to 1") -> $r4 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("  ") -> <JGFSeriesBenchSizeA: int nthreads> = 1 -> $i0 = <JGFSeriesBenchSizeA: int nthreads> -> staticinvoke <jgfutil.JGFInstrumentor: void printHeader(int,int,int)>(2, 0, $i0) -> $r5 = new series.JGFSeriesBench -> $i3 = <JGFSeriesBenchSizeA: int nthreads> -> specialinvoke $r5.<series.JGFSeriesBench: void <init>(int)>($i3) -> r1 = $r5 -> virtualinvoke r1.<series.JGFSeriesBench: void JGFrun(int)>(0) -> return ->  End~~~1
