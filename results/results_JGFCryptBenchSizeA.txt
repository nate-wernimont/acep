Start -> i0 := @parameter0: int -> i1 := @parameter1: int -> i2 := @parameter2: int -> r0 = "" -> r1 = "Java Grande Forum Thread Benchmark Suite - Version 1.0 - Section " -> $r5 = new java.lang.StringBuilder -> $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1) -> specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6) -> $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("2 - Size A") -> r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() -> goto [?= $r20 = <java.lang.System: java.io.PrintStream out>] -> $r20 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>(r0) -> if i2 != 1 goto $r26 = <java.lang.System: java.io.PrintStream out> -> $r21 = <java.lang.System: java.io.PrintStream out> -> $r22 = new java.lang.StringBuilder -> specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executing on ") -> $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2) -> $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" thread") -> $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() -> virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r25) -> goto [?= $r31 = <java.lang.System: java.io.PrintStream out>] -> $r31 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>("") -> return ->  End~~~1
Start -> r0 := @this: crypt.IDEATest -> specialinvoke r0.<java.lang.Object: void <init>()>() -> return ->  End~~~1
Start -> r0 := @this: crypt.JGFCryptBench -> i0 := @parameter0: int -> specialinvoke r0.<crypt.IDEATest: void <init>()>() -> $r1 = newarray (int)[3] -> $r1[0] = 3000000 -> $r1[1] = 20000000 -> $r1[2] = 50000000 -> r0.<crypt.JGFCryptBench: int[] datasizes> = $r1 -> <crypt.JGFCryptBench: int nthreads> = i0 -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> r1 := @parameter0: java.lang.String -> r2 := @parameter1: java.lang.String -> i0 := @parameter2: int -> specialinvoke r0.<java.lang.Object: void <init>()>() -> r0.<jgfutil.JGFTimer: int size> = -1 -> r0.<jgfutil.JGFTimer: java.lang.String name> = r1 -> r0.<jgfutil.JGFTimer: java.lang.String opname> = r2 -> r0.<jgfutil.JGFTimer: int size> = i0 -> virtualinvoke r0.<jgfutil.JGFTimer: void reset()>() -> r0 := @this: jgfutil.JGFTimer -> r0.<jgfutil.JGFTimer: double time> = 0.0 -> r0.<jgfutil.JGFTimer: long calls> = 0L -> r0.<jgfutil.JGFTimer: double opcount> = 0.0 -> r0.<jgfutil.JGFTimer: boolean on> = 0 -> return -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> r1 := @parameter1: java.lang.String -> i0 := @parameter2: int -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r8 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r8 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r9 = new jgfutil.JGFTimer -> specialinvoke $r9.<jgfutil.JGFTimer: void <init>(java.lang.String,java.lang.String,int)>(r0, r1, i0) -> virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r9) -> return ->  End~~~1
Start -> r0 := @this: crypt.IDEATest -> $i1 = r0.<crypt.IDEATest: int array_rows> -> $r2 = newarray (byte)[$i1] -> r0.<crypt.IDEATest: byte[] plain1> = $r2 -> $i2 = r0.<crypt.IDEATest: int array_rows> -> $r3 = newarray (byte)[$i2] -> r0.<crypt.IDEATest: byte[] crypt1> = $r3 -> $i3 = r0.<crypt.IDEATest: int array_rows> -> $r4 = newarray (byte)[$i3] -> r0.<crypt.IDEATest: byte[] plain2> = $r4 -> $r5 = new java.util.Random -> specialinvoke $r5.<java.util.Random: void <init>(long)>(136506717L) -> r1 = $r5 -> $r6 = newarray (short)[8] -> r0.<crypt.IDEATest: short[] userkey> = $r6 -> $r7 = newarray (int)[52] -> r0.<crypt.IDEATest: int[] Z> = $r7 -> $r8 = newarray (int)[52] -> r0.<crypt.IDEATest: int[] DK> = $r8 -> i0 = 0 -> goto [?= (branch)] -> if i0 < 8 goto $r9 = r0.<crypt.IDEATest: short[] userkey> -> $r9 = r0.<crypt.IDEATest: short[] userkey> -> $i4 = virtualinvoke r1.<java.util.Random: int nextInt()>() -> $s5 = (short) $i4 -> $r9[i0] = $s5 -> i0 = i0 + 1 -> specialinvoke r0.<crypt.IDEATest: void calcEncryptKey()>() -> r0 := @this: crypt.IDEATest -> i0 = 0 -> goto [?= (branch)] -> if i0 < 52 goto $r1 = r0.<crypt.IDEATest: int[] Z> -> $r1 = r0.<crypt.IDEATest: int[] Z> -> $r1[i0] = 0 -> i0 = i0 + 1 -> i2 = 0 -> if i2 < 8 goto $r2 = r0.<crypt.IDEATest: int[] Z> -> $r2 = r0.<crypt.IDEATest: int[] Z> -> $r3 = r0.<crypt.IDEATest: short[] userkey> -> $s3 = $r3[i2] -> $i4 = $s3 & 65535 -> $r2[i2] = $i4 -> i2 = i2 + 1 -> i5 = 8 -> if i5 < 52 goto i1 = i5 % 8 -> i1 = i5 % 8 -> if i1 >= 6 goto (branch) -> $r4 = r0.<crypt.IDEATest: int[] Z> -> $r5 = r0.<crypt.IDEATest: int[] Z> -> $i6 = i5 - 7 -> $i7 = $r5[$i6] -> $i8 = $i7 >>> 9 -> $r6 = r0.<crypt.IDEATest: int[] Z> -> $i9 = i5 - 6 -> $i10 = $r6[$i9] -> $i11 = $i10 << 7 -> $i12 = $i8 | $i11 -> $i13 = $i12 & 65535 -> $r4[i5] = $i13 -> goto [?= i5 = i5 + 1] -> i5 = i5 + 1 -> if i1 != 6 goto $r10 = r0.<crypt.IDEATest: int[] Z> -> $r7 = r0.<crypt.IDEATest: int[] Z> -> $r8 = r0.<crypt.IDEATest: int[] Z> -> $i14 = i5 - 7 -> $i15 = $r8[$i14] -> $i16 = $i15 >>> 9 -> $r9 = r0.<crypt.IDEATest: int[] Z> -> $i17 = i5 - 14 -> $i18 = $r9[$i17] -> $i19 = $i18 << 7 -> $i20 = $i16 | $i19 -> $i21 = $i20 & 65535 -> $r7[i5] = $i21 -> $r10 = r0.<crypt.IDEATest: int[] Z> -> $r11 = r0.<crypt.IDEATest: int[] Z> -> $i22 = i5 - 15 -> $i23 = $r11[$i22] -> $i24 = $i23 >>> 9 -> $r12 = r0.<crypt.IDEATest: int[] Z> -> $i25 = i5 - 14 -> $i26 = $r12[$i25] -> $i27 = $i26 << 7 -> $i28 = $i24 | $i27 -> $i29 = $i28 & 65535 -> $r10[i5] = $i29 -> return -> specialinvoke r0.<crypt.IDEATest: void calcDecryptKey()>() -> r0 := @this: crypt.IDEATest -> $r1 = r0.<crypt.IDEATest: int[] Z> -> $i6 = $r1[0] -> r0 := @this: crypt.IDEATest -> i0 := @parameter0: int -> if i0 > 1 goto i1 = 65537 / i0 -> i1 = 65537 / i0 -> i2 = 65537 % i0 -> if i2 != 1 goto i3 = 1 -> i3 = 1 -> i4 = i0 / i2 -> i0 = i0 % i2 -> $i7 = i4 * i1 -> i3 = i3 + $i7 -> if i0 != 1 goto i8 = i2 / i0 -> i8 = i2 / i0 -> i2 = i2 % i0 -> $i9 = i8 * i3 -> i1 = i1 + $i9 -> if i2 != 1 goto i4 = i0 / i2 -> return i3 -> i0 = specialinvoke r0.<crypt.IDEATest: int inv(int)>($i6) -> $r2 = r0.<crypt.IDEATest: int[] Z> -> $i7 = $r2[1] -> $i8 = neg $i7 -> i1 = $i8 & 65535 -> $r3 = r0.<crypt.IDEATest: int[] Z> -> $i9 = $r3[2] -> $i10 = neg $i9 -> i2 = $i10 & 65535 -> $r4 = r0.<crypt.IDEATest: int[] DK> -> $r5 = r0.<crypt.IDEATest: int[] Z> -> $i11 = $r5[3] -> $i10 = 1 - i1 -> $i11 = $i10 & 65535 -> return $i11 -> $i12 = specialinvoke r0.<crypt.IDEATest: int inv(int)>($i11) -> $r4[51] = $i12 -> $r6 = r0.<crypt.IDEATest: int[] DK> -> $r6[50] = i2 -> $r7 = r0.<crypt.IDEATest: int[] DK> -> $r7[49] = i1 -> $r8 = r0.<crypt.IDEATest: int[] DK> -> $r8[48] = i0 -> i3 = 47 -> i4 = 4 -> i5 = 0 -> goto [?= (branch)] -> if i5 < 7 goto $r9 = r0.<crypt.IDEATest: int[] Z> -> $r9 = r0.<crypt.IDEATest: int[] Z> -> i13 = i4 + 1 -> i14 = $r9[i4] -> $r10 = r0.<crypt.IDEATest: int[] DK> -> i15 = i3 + -1 -> $r11 = r0.<crypt.IDEATest: int[] Z> -> i16 = i13 + 1 -> $i17 = $r11[i13] -> $r10[i3] = $i17 -> $r12 = r0.<crypt.IDEATest: int[] DK> -> i18 = i15 + -1 -> $r12[i15] = i14 -> $r13 = r0.<crypt.IDEATest: int[] Z> -> i19 = i16 + 1 -> $i20 = $r13[i16] -> i21 = specialinvoke r0.<crypt.IDEATest: int inv(int)>($i20) -> $r14 = r0.<crypt.IDEATest: int[] Z> -> i22 = i19 + 1 -> $i23 = $r14[i19] -> $i24 = neg $i23 -> i25 = $i24 & 65535 -> $r15 = r0.<crypt.IDEATest: int[] Z> -> i26 = i22 + 1 -> $i27 = $r15[i22] -> $i28 = neg $i27 -> i29 = $i28 & 65535 -> $r16 = r0.<crypt.IDEATest: int[] DK> -> i30 = i18 + -1 -> $r17 = r0.<crypt.IDEATest: int[] Z> -> i4 = i26 + 1 -> $i31 = $r17[i26] -> $i32 = specialinvoke r0.<crypt.IDEATest: int inv(int)>($i31) -> $r16[i18] = $i32 -> $r18 = r0.<crypt.IDEATest: int[] DK> -> i33 = i30 + -1 -> $r18[i30] = i25 -> $r19 = r0.<crypt.IDEATest: int[] DK> -> i34 = i33 + -1 -> $r19[i33] = i29 -> $r20 = r0.<crypt.IDEATest: int[] DK> -> i3 = i34 + -1 -> $r20[i34] = i21 -> i5 = i5 + 1 -> $r21 = r0.<crypt.IDEATest: int[] Z> -> i35 = i4 + 1 -> i36 = $r21[i4] -> $r22 = r0.<crypt.IDEATest: int[] DK> -> i37 = i3 + -1 -> $r23 = r0.<crypt.IDEATest: int[] Z> -> i38 = i35 + 1 -> $i39 = $r23[i35] -> $r22[i3] = $i39 -> $r24 = r0.<crypt.IDEATest: int[] DK> -> i40 = i37 + -1 -> $r24[i37] = i36 -> $r25 = r0.<crypt.IDEATest: int[] Z> -> i41 = i38 + 1 -> $i42 = $r25[i38] -> i43 = specialinvoke r0.<crypt.IDEATest: int inv(int)>($i42) -> $r26 = r0.<crypt.IDEATest: int[] Z> -> i44 = i41 + 1 -> $i45 = $r26[i41] -> $i46 = neg $i45 -> i47 = $i46 & 65535 -> $r27 = r0.<crypt.IDEATest: int[] Z> -> i48 = i44 + 1 -> $i49 = $r27[i44] -> $i50 = neg $i49 -> i51 = $i50 & 65535 -> $r28 = r0.<crypt.IDEATest: int[] DK> -> i52 = i40 + -1 -> $r29 = r0.<crypt.IDEATest: int[] Z> -> i53 = i48 + 1 -> $i54 = $r29[i48] -> $i55 = specialinvoke r0.<crypt.IDEATest: int inv(int)>($i54) -> $r28[i40] = $i55 -> $r30 = r0.<crypt.IDEATest: int[] DK> -> i56 = i52 + -1 -> $r30[i52] = i51 -> $r31 = r0.<crypt.IDEATest: int[] DK> -> i57 = i56 + -1 -> $r31[i56] = i47 -> $r32 = r0.<crypt.IDEATest: int[] DK> -> i58 = i57 + -1 -> $r32[i57] = i43 -> return -> i6 = 0 -> goto [?= $i8 = r0.<crypt.IDEATest: int array_rows>] -> $i8 = r0.<crypt.IDEATest: int array_rows> -> if i6 < $i8 goto $r10 = r0.<crypt.IDEATest: byte[] plain1> -> $r10 = r0.<crypt.IDEATest: byte[] plain1> -> $b7 = (byte) i6 -> $r10[i6] = $b7 -> i6 = i6 + 1 -> return ->  End~~~2571582
Start -> r0 := @this: jgfutil.JGFTimer -> $z0 = r0.<jgfutil.JGFTimer: boolean on> -> if $z0 == 0 goto r0.<jgfutil.JGFTimer: boolean on> = 1 -> r0.<jgfutil.JGFTimer: boolean on> = 1 -> $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() -> r0.<jgfutil.JGFTimer: long start_time> = $l0 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void start()>() -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: crypt.IDEARunner -> i0 := @parameter0: int -> r1 := @parameter1: byte[] -> r2 := @parameter2: byte[] -> r3 := @parameter3: int[] -> specialinvoke r0.<java.lang.Object: void <init>()>() -> r0.<crypt.IDEARunner: int id> = i0 -> r0.<crypt.IDEARunner: byte[] text1> = r1 -> r0.<crypt.IDEARunner: byte[] text2> = r2 -> r0.<crypt.IDEARunner: int[] key> = r3 -> return ->  End~~~2
Start -> r0 := @this: crypt.IDEARunner -> $r1 = r0.<crypt.IDEARunner: byte[] text1> -> $i16 = lengthof $r1 -> i0 = $i16 / 8 -> $i17 = <crypt.JGFCryptBench: int nthreads> -> $i18 = i0 + $i17 -> $i19 = $i18 - 1 -> $i20 = <crypt.JGFCryptBench: int nthreads> -> i1 = $i19 / $i20 -> i2 = i1 * 8 -> $i21 = r0.<crypt.IDEARunner: int id> -> i3 = $i21 * i2 -> $i22 = r0.<crypt.IDEARunner: int id> -> $i23 = $i22 + 1 -> i4 = $i23 * i2 -> $r2 = r0.<crypt.IDEARunner: byte[] text1> -> $i24 = lengthof $r2 -> if i4 <= $i24 goto i5 = i3 -> i5 = i3 -> i6 = i3 -> i7 = i3 -> goto [?= (branch)] -> if i7 < i4 goto i8 = 0 -> i8 = 0 -> i9 = 8 -> $r4 = r0.<crypt.IDEARunner: byte[] text1> -> i25 = i5 + 1 -> $b26 = $r4[i5] -> s10 = $b26 & 255 -> $r5 = r0.<crypt.IDEARunner: byte[] text1> -> i27 = i25 + 1 -> $b28 = $r5[i25] -> $s29 = $b28 & 255 -> $i30 = $s29 << 8 -> i31 = s10 | $i30 -> $r6 = r0.<crypt.IDEARunner: byte[] text1> -> i32 = i27 + 1 -> $b33 = $r6[i27] -> s11 = $b33 & 255 -> $r7 = r0.<crypt.IDEARunner: byte[] text1> -> i34 = i32 + 1 -> $b35 = $r7[i32] -> $s36 = $b35 & 255 -> $i37 = $s36 << 8 -> i38 = s11 | $i37 -> $r8 = r0.<crypt.IDEARunner: byte[] text1> -> i39 = i34 + 1 -> $b40 = $r8[i34] -> s12 = $b40 & 255 -> $r9 = r0.<crypt.IDEARunner: byte[] text1> -> i41 = i39 + 1 -> $b42 = $r9[i39] -> $s43 = $b42 & 255 -> $i44 = $s43 << 8 -> i45 = s12 | $i44 -> $r10 = r0.<crypt.IDEARunner: byte[] text1> -> i46 = i41 + 1 -> $b47 = $r10[i41] -> s13 = $b47 & 255 -> $r11 = r0.<crypt.IDEARunner: byte[] text1> -> i5 = i46 + 1 -> $b48 = $r11[i46] -> $s49 = $b48 & 255 -> $i50 = $s49 << 8 -> i51 = s13 | $i50 -> $l52 = (long) i31 -> $r12 = r0.<crypt.IDEARunner: int[] key> -> i53 = i8 + 1 -> $i54 = $r12[i8] -> $l55 = (long) $i54 -> $l56 = $l52 * $l55 -> $l57 = $l56 % 65537L -> $l58 = $l57 & 65535L -> i59 = (int) $l58 -> $r13 = r0.<crypt.IDEARunner: int[] key> -> i60 = i53 + 1 -> $i61 = $r13[i53] -> $i62 = i38 + $i61 -> i63 = $i62 & 65535 -> $r14 = r0.<crypt.IDEARunner: int[] key> -> i64 = i60 + 1 -> $i65 = $r14[i60] -> $i66 = i45 + $i65 -> i67 = $i66 & 65535 -> $l68 = (long) i51 -> $r15 = r0.<crypt.IDEARunner: int[] key> -> i69 = i64 + 1 -> $i70 = $r15[i64] -> $l71 = (long) $i70 -> $l72 = $l68 * $l71 -> $l73 = $l72 % 65537L -> $l74 = $l73 & 65535L -> i75 = (int) $l74 -> i14 = i59 ^ i67 -> $l76 = (long) i14 -> $r16 = r0.<crypt.IDEARunner: int[] key> -> i77 = i69 + 1 -> $i78 = $r16[i69] -> $l79 = (long) $i78 -> $l80 = $l76 * $l79 -> $l81 = $l80 % 65537L -> $l82 = $l81 & 65535L -> i83 = (int) $l82 -> $i84 = i63 ^ i75 -> $i85 = i83 + $i84 -> i15 = $i85 & 65535 -> $l86 = (long) i15 -> $r17 = r0.<crypt.IDEARunner: int[] key> -> i8 = i77 + 1 -> $i87 = $r17[i77] -> $l88 = (long) $i87 -> $l89 = $l86 * $l88 -> $l90 = $l89 % 65537L -> $l91 = $l90 & 65535L -> i92 = (int) $l91 -> $i93 = i92 + i83 -> i94 = $i93 & 65535 -> i31 = i59 ^ i92 -> i51 = i75 ^ i94 -> i95 = i94 ^ i63 -> i38 = i67 ^ i92 -> i45 = i95 -> i9 = i9 + -1 -> if i9 != 0 goto $l52 = (long) i31 -> $l96 = (long) i31 -> $r18 = r0.<crypt.IDEARunner: int[] key> -> i97 = i8 + 1 -> $i98 = $r18[i8] -> $l99 = (long) $i98 -> $l100 = $l96 * $l99 -> $l101 = $l100 % 65537L -> $l102 = $l101 & 65535L -> i103 = (int) $l102 -> $r19 = r0.<crypt.IDEARunner: int[] key> -> i104 = i97 + 1 -> $i105 = $r19[i97] -> $i106 = i45 + $i105 -> i107 = $i106 & 65535 -> $r20 = r0.<crypt.IDEARunner: int[] key> -> i108 = i104 + 1 -> $i109 = $r20[i104] -> $i110 = i38 + $i109 -> i111 = $i110 & 65535 -> $l112 = (long) i51 -> $r21 = r0.<crypt.IDEARunner: int[] key> -> i113 = i108 + 1 -> $i114 = $r21[i108] -> $l115 = (long) $i114 -> $l116 = $l112 * $l115 -> $l117 = $l116 % 65537L -> $l118 = $l117 & 65535L -> i119 = (int) $l118 -> $r22 = r0.<crypt.IDEARunner: byte[] text2> -> i120 = i6 + 1 -> $b121 = (byte) i103 -> $r22[i6] = $b121 -> $r23 = r0.<crypt.IDEARunner: byte[] text2> -> i122 = i120 + 1 -> $i123 = i103 >>> 8 -> $b124 = (byte) $i123 -> $r23[i120] = $b124 -> $r24 = r0.<crypt.IDEARunner: byte[] text2> -> i125 = i122 + 1 -> $b126 = (byte) i107 -> $r24[i122] = $b126 -> $r25 = r0.<crypt.IDEARunner: byte[] text2> -> i127 = i125 + 1 -> $i128 = i107 >>> 8 -> $b129 = (byte) $i128 -> $r25[i125] = $b129 -> $r26 = r0.<crypt.IDEARunner: byte[] text2> -> i130 = i127 + 1 -> $b131 = (byte) i111 -> $r26[i127] = $b131 -> $r27 = r0.<crypt.IDEARunner: byte[] text2> -> i132 = i130 + 1 -> $i133 = i111 >>> 8 -> $b134 = (byte) $i133 -> $r27[i130] = $b134 -> $r28 = r0.<crypt.IDEARunner: byte[] text2> -> i135 = i132 + 1 -> $b136 = (byte) i119 -> $r28[i132] = $b136 -> $r29 = r0.<crypt.IDEARunner: byte[] text2> -> i6 = i135 + 1 -> $i137 = i119 >>> 8 -> $b138 = (byte) $i137 -> $r29[i135] = $b138 -> i7 = i7 + 8 -> return ->  End~~~5899998
Start -> r0 := @this: jgfutil.JGFTimer -> $d0 = r0.<jgfutil.JGFTimer: double time> -> $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() -> $l1 = r0.<jgfutil.JGFTimer: long start_time> -> $l2 = $l0 - $l1 -> $d1 = (double) $l2 -> $d2 = $d1 / 1000.0 -> $d3 = $d0 + $d2 -> r0.<jgfutil.JGFTimer: double time> = $d3 -> $z0 = r0.<jgfutil.JGFTimer: boolean on> -> if $z0 != 0 goto $l3 = r0.<jgfutil.JGFTimer: long calls> -> $l3 = r0.<jgfutil.JGFTimer: long calls> -> $l4 = $l3 + 1L -> r0.<jgfutil.JGFTimer: long calls> = $l4 -> r0.<jgfutil.JGFTimer: boolean on> = 0 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void stop()>() -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: crypt.IDEATest -> $i0 = <crypt.JGFCryptBench: int nthreads> -> r1 = newarray (java.lang.Runnable)[$i0] -> $i2 = <crypt.JGFCryptBench: int nthreads> -> r2 = newarray (java.lang.Thread)[$i2] -> staticinvoke <jgfutil.JGFInstrumentor: void startTimer(java.lang.String)>("Section2:Crypt:Kernel") -> i1 = 1 -> goto [?= $i3 = <crypt.JGFCryptBench: int nthreads>] -> $i3 = <crypt.JGFCryptBench: int nthreads> -> if i1 < $i3 goto $r3 = new crypt.IDEARunner -> $r11 = new crypt.IDEARunner -> $r12 = r0.<crypt.IDEATest: byte[] plain1> -> $r13 = r0.<crypt.IDEATest: byte[] crypt1> -> $r14 = r0.<crypt.IDEATest: int[] Z> -> specialinvoke $r11.<crypt.IDEARunner: void <init>(int,byte[],byte[],int[])>(0, $r12, $r13, $r14) -> r1[0] = $r11 -> $r15 = r1[0] -> interfaceinvoke $r15.<java.lang.Runnable: void run()>() -> i4 = 1 -> goto [?= $i5 = <crypt.JGFCryptBench: int nthreads>] -> $i5 = <crypt.JGFCryptBench: int nthreads> -> if i4 < $i5 goto $r16 = r2[i4] -> i6 = 1 -> goto [?= $i7 = <crypt.JGFCryptBench: int nthreads>] -> $i7 = <crypt.JGFCryptBench: int nthreads> -> if i6 < $i7 goto $r18 = new crypt.IDEARunner -> $r25 = new crypt.IDEARunner -> $r26 = r0.<crypt.IDEATest: byte[] crypt1> -> $r27 = r0.<crypt.IDEATest: byte[] plain2> -> $r28 = r0.<crypt.IDEATest: int[] DK> -> specialinvoke $r25.<crypt.IDEARunner: void <init>(int,byte[],byte[],int[])>(0, $r26, $r27, $r28) -> r1[0] = $r25 -> $r29 = r1[0] -> interfaceinvoke $r29.<java.lang.Runnable: void run()>() -> i8 = 1 -> goto [?= $i9 = <crypt.JGFCryptBench: int nthreads>] -> $i9 = <crypt.JGFCryptBench: int nthreads> -> if i8 < $i9 goto $r30 = r2[i8] -> staticinvoke <jgfutil.JGFInstrumentor: void stopTimer(java.lang.String)>("Section2:Crypt:Kernel") -> return ->  End~~~1
Start -> r0 := @this: crypt.IDEATest -> r0.<crypt.IDEATest: byte[] plain1> = null -> r0.<crypt.IDEATest: byte[] crypt1> = null -> r0.<crypt.IDEATest: byte[] plain2> = null -> r0.<crypt.IDEATest: short[] userkey> = null -> r0.<crypt.IDEATest: int[] Z> = null -> r0.<crypt.IDEATest: int[] DK> = null -> staticinvoke <java.lang.System: void gc()>() -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> d0 := @parameter0: double -> $d1 = r0.<jgfutil.JGFTimer: double opcount> -> $d2 = $d1 + d0 -> r0.<jgfutil.JGFTimer: double opcount> = $d2 -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> d0 := @parameter1: double -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void addops(double)>(d0) -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: jgfutil.JGFTimer -> $r1 = r0.<jgfutil.JGFTimer: java.lang.String opname> -> $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("") -> if $z0 == 0 goto $i0 = r0.<jgfutil.JGFTimer: int size> -> $i0 = r0.<jgfutil.JGFTimer: int size> -> $r10 = <java.lang.System: java.io.PrintStream out> -> $r11 = new java.lang.StringBuilder -> $r12 = r0.<jgfutil.JGFTimer: java.lang.String name> -> $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12) -> specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13) -> $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":SizeA") -> $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t") -> $d1 = r0.<jgfutil.JGFTimer: double time> -> $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1) -> $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (s) \t ") -> r0 := @this: jgfutil.JGFTimer -> $d0 = r0.<jgfutil.JGFTimer: double opcount> -> $d1 = r0.<jgfutil.JGFTimer: double time> -> $d2 = $d0 / $d1 -> return $d2 -> $d2 = virtualinvoke r0.<jgfutil.JGFTimer: double perf()>() -> $f0 = (float) $d2 -> $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0) -> $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t") -> $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (") -> $r21 = r0.<jgfutil.JGFTimer: java.lang.String opname> -> $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) -> $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/s)") -> $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() -> virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r24) -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @parameter0: java.lang.String -> $r1 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0) -> if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out> -> $r2 = <jgfutil.JGFInstrumentor: java.util.Hashtable timers> -> $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0) -> $r4 = (jgfutil.JGFTimer) $r3 -> virtualinvoke $r4.<jgfutil.JGFTimer: void print()>() -> goto [?= return] -> return ->  End~~~1
Start -> r0 := @this: crypt.JGFCryptBench -> i0 := @parameter0: int -> staticinvoke <jgfutil.JGFInstrumentor: void addTimer(java.lang.String,java.lang.String,int)>("Section2:Crypt:Kernel", "Kbyte", i0) -> virtualinvoke r0.<crypt.JGFCryptBench: void JGFsetsize(int)>(i0) -> r0 := @this: crypt.JGFCryptBench -> i0 := @parameter0: int -> r0.<crypt.JGFCryptBench: int size> = i0 -> return -> virtualinvoke r0.<crypt.JGFCryptBench: void JGFinitialise()>() -> r0 := @this: crypt.JGFCryptBench -> $r1 = r0.<crypt.JGFCryptBench: int[] datasizes> -> $i0 = r0.<crypt.JGFCryptBench: int size> -> $i1 = $r1[$i0] -> r0.<crypt.JGFCryptBench: int array_rows> = $i1 -> virtualinvoke r0.<crypt.JGFCryptBench: void buildTestData()>() -> return -> virtualinvoke r0.<crypt.JGFCryptBench: void JGFkernel()>() -> r0 := @this: crypt.JGFCryptBench -> virtualinvoke r0.<crypt.JGFCryptBench: void Do()>() -> return -> virtualinvoke r0.<crypt.JGFCryptBench: void JGFvalidate()>() -> r0 := @this: crypt.JGFCryptBench -> z0 = 0 -> i0 = 0 -> goto [?= $i6 = r0.<crypt.JGFCryptBench: int array_rows>] -> $i6 = r0.<crypt.JGFCryptBench: int array_rows> -> if i0 < $i6 goto $r1 = r0.<crypt.JGFCryptBench: byte[] plain1> -> $r1 = r0.<crypt.JGFCryptBench: byte[] plain1> -> $b1 = $r1[i0] -> $r2 = r0.<crypt.JGFCryptBench: byte[] plain2> -> $b2 = $r2[i0] -> if $b1 == $b2 goto $z1 = 0 -> $z1 = 0 -> z2 = $z1 -> if z2 == 0 goto i0 = i0 + 1 -> i0 = i0 + 1 -> return -> virtualinvoke r0.<crypt.JGFCryptBench: void JGFtidyup()>() -> r0 := @this: crypt.JGFCryptBench -> virtualinvoke r0.<crypt.JGFCryptBench: void freeTestData()>() -> return -> $i1 = r0.<crypt.JGFCryptBench: int array_rows> -> $i2 = 2 * $i1 -> $d0 = (double) $i2 -> $d1 = $d0 / 1000.0 -> staticinvoke <jgfutil.JGFInstrumentor: void addOpsToTimer(java.lang.String,double)>("Section2:Crypt:Kernel", $d1) -> staticinvoke <jgfutil.JGFInstrumentor: void printTimer(java.lang.String)>("Section2:Crypt:Kernel") -> return ->  End~~~2750000
Start -> r0 := @parameter0: java.lang.String[] -> $i1 = lengthof r0 -> if $i1 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out> -> $r3 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("The no of threads has not been specified, defaulting to 1") -> $r4 = <java.lang.System: java.io.PrintStream out> -> virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("  ") -> <JGFCryptBenchSizeA: int nthreads> = 1 -> $i0 = <JGFCryptBenchSizeA: int nthreads> -> staticinvoke <jgfutil.JGFInstrumentor: void printHeader(int,int,int)>(2, 0, $i0) -> $r5 = new crypt.JGFCryptBench -> $i3 = <JGFCryptBenchSizeA: int nthreads> -> specialinvoke $r5.<crypt.JGFCryptBench: void <init>(int)>($i3) -> r1 = $r5 -> virtualinvoke r1.<crypt.JGFCryptBench: void JGFrun(int)>(0) -> return ->  End~~~1
